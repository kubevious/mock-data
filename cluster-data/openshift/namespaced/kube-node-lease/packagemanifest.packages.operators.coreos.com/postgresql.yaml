apiVersion: packages.operators.coreos.com/v1
kind: PackageManifest
metadata:
  creationTimestamp: "2022-10-03T18:25:13Z"
  labels:
    catalog: operatorhubio-catalog
    catalog-namespace: olm
    operatorframework.io/arch.amd64: supported
    operatorframework.io/os.linux: supported
    provider: Crunchy Data
    provider-url: https://www.crunchydata.com/
  name: postgresql
  namespace: kube-node-lease
spec: {}
status:
  catalogSource: operatorhubio-catalog
  catalogSourceDisplayName: Community Operators
  catalogSourceNamespace: olm
  catalogSourcePublisher: OperatorHub.io
  channels:
  - currentCSV: postgresoperator.v5.2.0
    currentCSVDesc:
      annotations:
        alm-examples: |-
          [
            {
              "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
              "kind": "PostgresCluster",
              "metadata": {
                "name": "example"
              },
              "spec": {
                "instances": [
                  {
                    "dataVolumeClaimSpec": {
                      "accessModes": [
                        "ReadWriteOnce"
                      ],
                      "resources": {
                        "requests": {
                          "storage": "1Gi"
                        }
                      }
                    },
                    "replicas": 1
                  }
                ],
                "postgresVersion": 13
              }
            }
          ]
        capabilities: Auto Pilot
        categories: Database
        containerImage: registry.developers.crunchydata.com/crunchydata/postgres-operator:ubi8-5.2.0-0
        createdAt: 2019-12-31 19:40Z
        description: Production Postgres Made Easy
        olm.properties: '[]'
        repository: https://github.com/CrunchyData/postgres-operator
        support: crunchydata.com
      apiservicedefinitions: {}
      customresourcedefinitions:
        owned:
        - description: PostgresCluster is the Schema for the postgresclusters API
          displayName: Postgres Cluster
          kind: PostgresCluster
          name: postgresclusters.postgres-operator.crunchydata.com
          version: v1beta1
      description: |-
        [PGO](https://github.com/CrunchyData/postgres-operator), the
        [Postgres Operator](https://github.com/CrunchyData/postgres-operator) from
        [Crunchy Data](https://www.crunchydata.com), gives you a **declarative Postgres** solution that
        automatically manages your [PostgreSQL](https://www.postgresql.org) clusters.

        Designed for your GitOps workflows, it is [easy to get started](https://access.crunchydata.com/documentation/postgres-operator/v5/quickstart/)
        with Postgres on Kubernetes with PGO. Within a few moments, you can have a production grade Postgres
        cluster complete with high availability, disaster recovery, and monitoring, all over secure TLS communications.
        Even better, PGO lets you easily customize your Postgres cluster to tailor it to your workload!

        With conveniences like cloning Postgres clusters to using rolling updates to roll out disruptive
        changes with minimal downtime, PGO is ready to support your Postgres data at every stage of your
        release pipeline. Built for resiliency and uptime, PGO will keep your desired Postgres in a desired
        state so you do not need to worry about it.

        PGO is developed with many years of production experience in automating Postgres management on
        Kubernetes, providing a seamless cloud native Postgres solution to keep your data always available.

        - **PostgreSQL Cluster Provisioning**: [Create, Scale, & Delete PostgreSQL clusters with ease][provisioning],
          while fully customizing your Pods and PostgreSQL configuration!
        - **High-Availability**: Safe, automated failover backed by a [distributed consensus based high-availability solution][high-availability].
          Uses [Pod Anti-Affinity][k8s-anti-affinity] to help resiliency; you can configure how aggressive this can be!
          Failed primaries automatically heal, allowing for faster recovery time. You can even create regularly scheduled
          backups as well and set your backup retention policy
        - **Disaster Recovery**: [Backups][backups] and [restores][disaster-recovery] leverage the open source [pgBackRest][] utility and
          [includes support for full, incremental, and differential backups as well as efficient delta restores][backups].
          Set how long you want your backups retained for. Works great with very large databases!
        - **Monitoring**: [Track the health of your PostgreSQL clusters][monitoring] using the open source [pgMonitor][] library.
        - **Clone**: [Create new clusters from your existing clusters or backups][clone] with efficient data cloning.
        - **TLS**: All connections are over [TLS][tls]. You can also [bring your own TLS infrastructure][tls] if you do not want to use the provided defaults.
        - **Connection Pooling**: Advanced [connection pooling][pool] support using [pgBouncer][].
        - **Affinity and Tolerations**: Have your PostgreSQL clusters deployed to [Kubernetes Nodes][k8s-nodes] of your preference.
          Set your [pod anti-affinity][k8s-anti-affinity], node affinity, Pod tolerations and more rules to customize your deployment topology!
        - **Full Customizability**: Crunchy PostgreSQL for Kubernetes makes it easy to get your own PostgreSQL-as-a-Service up and running
          and fully customize your deployments, including:
            - Choose the resources for your Postgres cluster: [container resources and storage size][resize-cluster]. [Resize at any time][resize-cluster] with minimal disruption.
            - Use your own container image repository, including support `imagePullSecrets` and private repositories
            - [Customize your PostgreSQL configuration][customize-cluster]

        and much more!

        [backups]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/backups/
        [clone]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/disaster-recovery/#clone-a-postgres-cluster
        [customize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/customize-cluster/
        [disaster-recovery]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/disaster-recovery/
        [high-availability]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/high-availability/
        [monitoring]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/monitoring/
        [pool]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/connection-pooling/
        [provisioning]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/create-cluster/
        [resize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/resize-cluster/
        [tls]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/customize-cluster/#customize-tls

        [k8s-anti-affinity]: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity
        [k8s-nodes]: https://kubernetes.io/docs/concepts/architecture/nodes/

        [pgBackRest]: https://www.pgbackrest.org
        [pgBouncer]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/connection-pooling/
        [pgMonitor]: https://github.com/CrunchyData/pgmonitor


        ## Post-Installation

        ### Tutorial

        Want to [learn more about the PostgreSQL Operator][tutorial]? Browse through the [tutorial][] to learn more about what you can do!

        [tutorial]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial
      displayName: Crunchy Postgres for Kubernetes
      installModes:
      - supported: true
        type: OwnNamespace
      - supported: true
        type: SingleNamespace
      - supported: false
        type: MultiNamespace
      - supported: true
        type: AllNamespaces
      keywords:
      - postgres
      - postgresql
      - database
      - sql
      - operator
      - crunchy data
      links:
      - name: Crunchy Data
        url: https://www.crunchydata.com/
      - name: Documentation
        url: https://access.crunchydata.com/documentation/postgres-operator/v5/
      maintainers:
      - email: info@crunchydata.com
        name: Crunchy Data
      maturity: stable
      minKubeVersion: 1.19.0
      provider:
        name: Crunchy Data
        url: https://www.crunchydata.com/
      relatedImages:
      - registry.developers.crunchydata.com/crunchydata/postgres-operator:ubi8-5.2.0-0
      version: 5.2.0
    name: v5
  - currentCSV: postgresoperator.v4.0.1
    currentCSVDesc:
      annotations:
        alm-examples: "[{\n    \"apiVersion\": \"crunchydata.com/v1\",\n    \"kind\":
          \"Pgcluster\",\n    \"metadata\": {\n        \"labels\": {\n            \"archive\":
          \"false\",\n            \"archive-timeout\": \"60\",\n            \"crunchy-pgbadger\":
          \"false\",\n            \"crunchy_collect\": \"false\",\n            \"current-primary\":
          \"fromcrd\",\n            \"deployment-name\": \"fromcrd\",\n            \"name\":
          \"fromcrd\",\n            \"pg-cluster\": \"fromcrd\",\n            \"pgo-backrest\":
          \"false\",\n            \"pgo-version\": \"4.0.1\",\n            \"primary\":
          \"true\"\n        },\n        \"name\": \"fromcrd\",\n      \"namespace\":
          \"pgo\"\n    },\n    \"spec\": {\n        \"ArchiveStorage\": {\n            \"accessmode\":
          \"\",\n            \"fsgroup\": \"26\",\n            \"matchLabels\": \"\",\n
          \           \"name\": \"\",\n            \"size\": \"\",\n            \"storageclass\":
          \"fast\",\n            \"storagetype\": \"dynamic\",\n            \"supplementalgroups\":
          \"\"\n        },\n        \"BackrestStorage\": {\n            \"accessmode\":
          \"ReadWriteOnce\",\n            \"fsgroup\": \"26\",\n            \"matchLabels\":
          \"\",\n            \"name\": \"\",\n            \"size\": \"1G\",\n            \"storageclass\":
          \"fast\",\n            \"storagetype\": \"dynamic\",\n            \"supplementalgroups\":
          \"\"\n        },\n        \"ContainerResources\": {\n            \"limitscpu\":
          \"\",\n            \"limitsmemory\": \"\",\n            \"requestscpu\":
          \"\",\n            \"requestsmemory\": \"\"\n        },\n        \"PrimaryStorage\":
          {\n            \"accessmode\": \"ReadWriteOnce\",\n            \"fsgroup\":
          \"26\",\n            \"matchLabels\": \"\",\n            \"name\": \"fromcrd\",\n
          \           \"size\": \"1G\",\n            \"storageclass\": \"fast\",\n
          \           \"storagetype\": \"dynamic\",\n            \"supplementalgroups\":
          \"\"\n        },\n        \"ReplicaStorage\": {\n            \"accessmode\":
          \"ReadWriteOnce\",\n            \"fsgroup\": \"26\",\n            \"matchLabels\":
          \"\",\n            \"name\": \"\",\n            \"size\": \"1G\",\n            \"storageclass\":
          \"fast\",\n            \"storagetype\": \"dynamic\",\n            \"supplementalgroups\":
          \"\"\n        },\n        \"backuppath\": \"\",\n        \"backuppvcname\":
          \"\",\n        \"ccpimage\":\"crunchy-postgres\",\n        \"ccpimagetag\":
          \"centos7-11.4-2.4.1\",\n        \"clustername\": \"fromcrd\",\n        \"customconfig\":
          \"\",\n        \"database\": \"userdb\",\n        \"name\": \"fromcrd\",\n
          \     \"namespace\":\"pgo\",\n        \"nodename\": \"\",\n        \"policies\":
          \"\",\n        \"port\": \"5432\",\n        \"primaryhost\": \"fromcrd\",\n
          \       \"primarysecretname\": \"fromcrd-primaryuser-secret\",\n        \"replicas\":
          \"0\",\n        \"rootsecretname\": \"fromcrd-postgres-secret\",\n        \"secretfrom\":
          \"\",\n        \"status\": \"\",\n        \"strategy\": \"1\",\n        \"user\":
          \"testuser\",\n        \"userlabels\": {\n            \"archive\": \"false\",\n
          \           \"archive-timeout\": \"60\",\n            \"crunchy-pgbadger\":
          \"false\",\n            \"crunchy_collect\": \"false\",\n            \"pgo-backrest\":
          \"false\",\n            \"pgo-version\": \"4.0.1\"\n        },\n        \"usersecretname\":
          \"fromcrd-testuser-secret\"\n    }\n},{\n    \"apiVersion\": \"crunchydata.com/v1\",\n
          \   \"kind\": \"Pgreplica\",\n    \"metadata\": {\n        \"name\": \"fromcrd\",\n
          \       \"namespace\": \"pgo\"\n    },\n    \"spec\": {}\n},{\n    \"apiVersion\":
          \"crunchydata.com/v1\",\n    \"kind\": \"Pgpolicy\",\n    \"metadata\":
          {\n        \"name\": \"fromcrd\",\n        \"namespace\": \"pgo\"\n    },\n
          \   \"spec\": {}\n},{\n    \"apiVersion\": \"crunchydata.com/v1\",\n    \"kind\":
          \"Pgtask\",\n    \"metadata\": {\n        \"name\": \"fromcrd\",\n        \"namespace\":
          \"pgo\"\n    },\n    \"spec\": {}\n},{\n    \"apiVersion\": \"crunchydata.com/v1\",\n
          \   \"kind\": \"Pgbackup\",\n    \"metadata\": {\n        \"name\": \"fromcrd\",\n
          \       \"namespace\": \"pgo\"\n    },\n    \"spec\": {}\n}] \n"
        capabilities: Full Lifecycle
        categories: Database
        certified: "false"
        containerImage: crunchydata/postgres-operator:centos7-4.0.1
        createdAt: 07/04/2019
        description: A Postgres Operator from Crunchydata.com
        operatorhub.io/ui-metadata-max-k8s-version: "1.21"
        repository: https://github.com/CrunchyData/postgres-operator
        support: crunchydata.com
      apiservicedefinitions: {}
      customresourcedefinitions:
        owned:
        - description: Represents a Postgres primary cluster member
          displayName: Postgres Primary Cluster Member
          kind: Pgcluster
          name: pgclusters.crunchydata.com
          version: v1
        - description: Represents a Postgres replica cluster member
          displayName: Postgres Replica Cluster Member
          kind: Pgreplica
          name: pgreplicas.crunchydata.com
          version: v1
        - description: Represents a Postgres sql policy
          displayName: Postgres SQL Policy
          kind: Pgpolicy
          name: pgpolicies.crunchydata.com
          version: v1
        - description: Represents a Postgres workflow task
          displayName: Postgres workflow task
          kind: Pgtask
          name: pgtasks.crunchydata.com
          version: v1
        - description: Represents a Postgres backup task
          displayName: Postgres backup task
          kind: Pgbackup
          name: pgbackups.crunchydata.com
          version: v1
      description: "The PostgreSQL Operator runs within a Kubernetes cluster and provides
        a means to deploy and manage PostgreSQL clusters.\n\n## Before You Begin\n\nThere
        are several manual steps that the cluster administrator must perform prior
        to installing the operator. The\noperator must be provided with an initial
        configuration to run in the cluster, as well as certificates and\ncredentials
        that need to be generated.\n\nStart by cloning the operator repository locally.\n\n```\ngit
        clone -b 4.0.1 https://github.com/CrunchyData/postgres-operator.git\ncd postgres-operator\n```\n\n###
        Operator Configuration\n\nEdit `conf/postgres-operator/pgo.yaml` to configure
        the operator deployment. Look over all of the options and make any\nchanges
        necessary for your environment.\n\n#### Image\n\nUpdate the `CCPImageTag`
        tag to configure the postgres image being used, updating for the version of
        postgres as needed.\n\n```\nCCPImageTag:  centos7-11.3-2.4.1\n```\n\n####
        Storage\n\nConfigure the backend storage for the Persistent Volumes used by
        each cluster. Depending on the type of persistent\nstorage you wish to make
        available, adjust the `StorageClass` as necessary. In this case, we are deployed
        on AWS using `gp2`\nis the default for the cluster.\n\n```\nstorageos:\n  AccessMode:
        \ ReadWriteOnce\n  Size:  1G\n  StorageType:  dynamic\n  StorageClass:  gp2\n
        \ Fsgroup:  26\n```\n\nOnce the storage backend is defined, enable the new
        storage option as needed.\n\n```\nPrimaryStorage: storageos\nXlogStorage:
        storageos\nBackupStorage: storageos\nReplicaStorage: storageos\nBackrestStorage:
        storageos\n```\n\n### Certificates\n\nYou will need to either generate new
        TLS certificates or use existing certificates for the operator API.\n\nYou
        can generate new self-signed certificates using scripts in the operator repository.\n\n```\nexport
        PGOROOT=$(pwd)\ncd $PGOROOT/deploy\n$PGOROOT/deploy/gen-api-keys.sh\n$PGOROOT/deploy/gen-sshd-keys.sh\ncd
        $PGOROOT\n```\n\n### Configuration and Secrets\n\nOnce the configuration changes
        have been updated and certificates are in place, we can save the information
        to the cluster.\n\nCreate the pgo namespace if it does not exist already.
        This single namespace is where the operator should be deployed to. Postgres
        clusters will also be deployed here.\n\n```\noc create namespace pgo \n```\n\nCreate
        the `pgo-backrest-repo-config` Secret that is used by the operator.\n\n```\nkubectl
        create secret generic -n pgo pgo-backrest-repo-config \\\n  --from-file=config=$PGOROOT/conf/pgo-backrest-repo/config
        \\\n\t--from-file=sshd_config=$PGOROOT/conf/pgo-backrest-repo/sshd_config
        \\\n  --from-file=aws-s3-credentials.yaml=$PGOROOT/conf/pgo-backrest-repo/aws-s3-credentials.yaml
        \\\n  --from-file=aws-s3-ca.crt=$PGOROOT/conf/pgo-backrest-repo/aws-s3-ca.crt\n\n\n```\n\nCreate
        the `pgo-auth-secret` Secret that is used by the operator.\n\n```\nkubectl
        create secret generic -n pgo pgo-auth-secret \\\n  --from-file=server.crt=$PGOROOT/conf/postgres-operator/server.crt
        \\\n  --from-file=server.key=$PGOROOT/conf/postgres-operator/server.key \\\n
        \ --from-file=pgouser=$PGOROOT/conf/postgres-operator/pgouser \\\n  --from-file=pgorole=$PGOROOT/conf/postgres-operator/pgorole\n```\n\nRemove
        existing credentials for pgo-apiserver TLS REST API, if they exist.\n\n```\nkubectl
        delete secret -n pgo tls pgo.tls\n```\n\nCreate credentials for pgo-apiserver
        TLS REST API\n```\nkubectl create secret -n pgo tls pgo.tls \\\n  --key=$PGOROOT/conf/postgres-operator/server.key
        \\\n  --cert=$PGOROOT/conf/postgres-operator/server.crt\n```\n\nCreate the
        `pgo-config` ConfigMap that is used by the operator.\n\n```\nkubectl create
        configmap -n pgo pgo-config \\\n--from-file=$PGOROOT/conf/postgres-operator\n\n```\n\nOnce
        these resources are in place, the operator can be installed into the cluster.\n\n##
        After You Install\n\nOnce the operator is installed in the cluster, you will
        need to perform several steps to enable usage.\n\n### Service\n\n```\noc expose
        deployment -n pgo postgres-operator --type=LoadBalancer\n```\n\nFor the pgo
        client to communicate with the operator, it needs to know where to connect.
        Export the service url as the PGO_APISERVER_URL for the pgo client in the
        shell\n\n```\nexport PGO_APISERVER_URL=https://<url of exposed service>:8443\n```\n\n###
        Security\n\nWhen postgres operator deploys, it creates a set of certificates
        the pgo client will need to communicate. \n\n### Client Certificates\n\nCopy
        the client certificates from the apiserver to the local environment - we use
        /tmp for this example. \n\n```\noc cp <pgo-namespace>/<postgres-operator-pod>:/tmp/server.key
        /tmp/server.key -c apiserver\noc cp <pgo-namespace>/<postgres-operator-pod>:/tmp/server.crt
        /tmp/server.crt -c apiserver\n```\n\nConfigure the shell for the pgo command
        line to use the certificates\n\n```\nexport PGO_CA_CERT=/tmp/server.crt\nexport
        PGO_CLIENT_CERT=/tmp/server.crt\nexport PGO_CLIENT_KEY=/tmp/server.key\n```\n"
      displayName: Crunchy PostgreSQL Enterprise
      installModes:
      - supported: true
        type: OwnNamespace
      - supported: false
        type: SingleNamespace
      - supported: false
        type: MultiNamespace
      - supported: false
        type: AllNamespaces
      keywords:
      - postgres
      - app
      links:
      - name: Crunchy Data
        url: https://crunchydata.com
      - name: Crunchy Postgres Operator v4.0 Quick Deploy
        url: https://github.com/CrunchyData/postgres-operator/tree/develop/examples/olm
      maintainers:
      - email: support@crunchydata.com
        name: Crunchy Data
      maturity: stable
      minKubeVersion: 1.11.0
      provider:
        name: CrunchyData.com
      relatedImages:
      - crunchydata/pgo-scheduler:centos7-4.0.1
      - crunchydata/postgres-operator:centos7-4.0.1
      - crunchydata/pgo-apiserver:centos7-4.0.1
      version: 4.0.1
    name: original_40
  - currentCSV: postgresoperator.v4.1.0
    currentCSVDesc:
      annotations:
        alm-examples: "[{\n    \"apiVersion\": \"crunchydata.com/v1\",\n    \"kind\":
          \"Pgcluster\",\n    \"metadata\": {\n        \"labels\": {\n            \"archive\":
          \"false\",\n            \"archive-timeout\": \"60\",\n            \"crunchy-pgbadger\":
          \"false\",\n            \"crunchy_collect\": \"false\",\n            \"current-primary\":
          \"fromcrd\",\n            \"deployment-name\": \"fromcrd\",\n            \"name\":
          \"fromcrd\",\n            \"pg-cluster\": \"fromcrd\",\n            \"pgo-backrest\":
          \"false\",\n            \"pgo-version\": \"4.1.0\",\n            \"primary\":
          \"true\"\n        },\n        \"name\": \"fromcrd\",\n      \"namespace\":
          \"pgo\"\n    },\n    \"spec\": {\n        \"ArchiveStorage\": {\n            \"accessmode\":
          \"\",\n            \"fsgroup\": \"26\",\n            \"matchLabels\": \"\",\n
          \           \"name\": \"\",\n            \"size\": \"\",\n            \"storageclass\":
          \"fast\",\n            \"storagetype\": \"dynamic\",\n            \"supplementalgroups\":
          \"\"\n        },\n        \"BackrestStorage\": {\n            \"accessmode\":
          \"ReadWriteOnce\",\n            \"fsgroup\": \"26\",\n            \"matchLabels\":
          \"\",\n            \"name\": \"\",\n            \"size\": \"1G\",\n            \"storageclass\":
          \"fast\",\n            \"storagetype\": \"dynamic\",\n            \"supplementalgroups\":
          \"\"\n        },\n        \"ContainerResources\": {\n            \"limitscpu\":
          \"\",\n            \"limitsmemory\": \"\",\n            \"requestscpu\":
          \"\",\n            \"requestsmemory\": \"\"\n        },\n        \"PrimaryStorage\":
          {\n            \"accessmode\": \"ReadWriteOnce\",\n            \"fsgroup\":
          \"26\",\n            \"matchLabels\": \"\",\n            \"name\": \"fromcrd\",\n
          \           \"size\": \"1G\",\n            \"storageclass\": \"fast\",\n
          \           \"storagetype\": \"dynamic\",\n            \"supplementalgroups\":
          \"\"\n        },\n        \"ReplicaStorage\": {\n            \"accessmode\":
          \"ReadWriteOnce\",\n            \"fsgroup\": \"26\",\n            \"matchLabels\":
          \"\",\n            \"name\": \"\",\n            \"size\": \"1G\",\n            \"storageclass\":
          \"fast\",\n            \"storagetype\": \"dynamic\",\n            \"supplementalgroups\":
          \"\"\n        },\n        \"backuppath\": \"\",\n        \"backuppvcname\":
          \"\",\n        \"ccpimage\":\"crunchy-postgres\",\n        \"ccpimagetag\":
          \"centos7-11.5-2.4.2\",\n        \"clustername\": \"fromcrd\",\n        \"customconfig\":
          \"\",\n        \"database\": \"userdb\",\n        \"name\": \"fromcrd\",\n
          \     \"namespace\":\"pgo\",\n        \"nodename\": \"\",\n        \"policies\":
          \"\",\n        \"port\": \"5432\",\n        \"primaryhost\": \"fromcrd\",\n
          \       \"primarysecretname\": \"fromcrd-primaryuser-secret\",\n        \"replicas\":
          \"0\",\n        \"rootsecretname\": \"fromcrd-postgres-secret\",\n        \"secretfrom\":
          \"\",\n        \"status\": \"\",\n        \"strategy\": \"1\",\n        \"user\":
          \"testuser\",\n        \"userlabels\": {\n            \"archive\": \"false\",\n
          \           \"archive-timeout\": \"60\",\n            \"crunchy-pgbadger\":
          \"false\",\n            \"crunchy_collect\": \"false\",\n            \"pgo-backrest\":
          \"false\",\n            \"pgo-version\": \"4.1.0\"\n        },\n        \"usersecretname\":
          \"fromcrd-testuser-secret\"\n    }\n},{\n    \"apiVersion\": \"crunchydata.com/v1\",\n
          \   \"kind\": \"Pgreplica\",\n    \"metadata\": {\n        \"name\": \"fromcrd\",\n
          \       \"namespace\": \"pgo\"\n    },\n    \"spec\": {}\n},{\n    \"apiVersion\":
          \"crunchydata.com/v1\",\n    \"kind\": \"Pgpolicy\",\n    \"metadata\":
          {\n        \"name\": \"fromcrd\",\n        \"namespace\": \"pgo\"\n    },\n
          \   \"spec\": {}\n},{\n    \"apiVersion\": \"crunchydata.com/v1\",\n    \"kind\":
          \"Pgtask\",\n    \"metadata\": {\n        \"name\": \"fromcrd\",\n        \"namespace\":
          \"pgo\"\n    },\n    \"spec\": {}\n},{\n    \"apiVersion\": \"crunchydata.com/v1\",\n
          \   \"kind\": \"Pgbackup\",\n    \"metadata\": {\n        \"name\": \"fromcrd\",\n
          \       \"namespace\": \"pgo\"\n    },\n    \"spec\": {}\n}] \n"
        capabilities: Full Lifecycle
        categories: Database
        certified: "false"
        containerImage: crunchydata/postgres-operator:centos7-4.1.0
        createdAt: 10/29/2019
        description: A Postgres Operator from Crunchydata.com
        operatorhub.io/ui-metadata-max-k8s-version: "1.21"
        repository: https://github.com/CrunchyData/postgres-operator
        support: crunchydata.com
      apiservicedefinitions: {}
      customresourcedefinitions:
        owned:
        - description: Represents a Postgres primary cluster member
          displayName: Postgres Primary Cluster Member
          kind: Pgcluster
          name: pgclusters.crunchydata.com
          version: v1
        - description: Represents a Postgres replica cluster member
          displayName: Postgres Replica Cluster Member
          kind: Pgreplica
          name: pgreplicas.crunchydata.com
          version: v1
        - description: Represents a Postgres sql policy
          displayName: Postgres SQL Policy
          kind: Pgpolicy
          name: pgpolicies.crunchydata.com
          version: v1
        - description: Represents a Postgres workflow task
          displayName: Postgres workflow task
          kind: Pgtask
          name: pgtasks.crunchydata.com
          version: v1
        - description: Represents a Postgres backup task
          displayName: Postgres backup task
          kind: Pgbackup
          name: pgbackups.crunchydata.com
          version: v1
      description: "The PostgreSQL Operator runs within a Kubernetes cluster and provides
        a means to deploy and manage PostgreSQL clusters.\n\n## Before You Begin\n\nThere
        are several manual steps that the cluster administrator must perform prior
        to installing the operator. The\noperator must be provided with an initial
        configuration to run in the cluster, as well as certificates and\ncredentials
        that need to be generated.\n\nStart by cloning the operator repository locally.\n\n```\ngit
        clone -b 4.1.0 https://github.com/CrunchyData/postgres-operator.git\ncd postgres-operator\n```\n\n###
        Operator Configuration\n\nEdit `conf/postgres-operator/pgo.yaml` to configure
        the operator deployment. Look over all of the options and make any\nchanges
        necessary for your environment.\n\n#### Image\n\nUpdate the `CCPImageTag`
        tag to configure the postgres image being used, updating for the version of
        postgres as needed.\n\n```\nCCPImageTag:  centos7-11.5-2.4.2\n```\n\n####
        Storage\n\nConfigure the backend storage for the Persistent Volumes used by
        each cluster. Depending on the type of persistent\nstorage you wish to make
        available, adjust the `StorageClass` as necessary. In this case, we are deployed
        on AWS using `gp2`\nis the default for the cluster.\n\n```\nstorageos:\n  AccessMode:
        \ ReadWriteOnce\n  Size:  1G\n  StorageType:  dynamic\n  StorageClass:  gp2\n
        \ Fsgroup:  26\n```\n\nOnce the storage backend is defined, enable the new
        storage option as needed.\n\n```\nPrimaryStorage: storageos\nXlogStorage:
        storageos\nBackupStorage: storageos\nReplicaStorage: storageos\nBackrestStorage:
        storageos\n```\n\n### Certificates\n\nYou will need to either generate new
        TLS certificates or use existing certificates for the operator API.\n\nYou
        can generate new self-signed certificates using scripts in the operator repository.\n\n```\nexport
        PGOROOT=$(pwd)\ncd $PGOROOT/deploy\n$PGOROOT/deploy/gen-api-keys.sh\n$PGOROOT/deploy/gen-sshd-keys.sh\ncd
        $PGOROOT\n```\n\n### Configuration and Secrets\n\nOnce the configuration changes
        have been updated and certificates are in place, we can save the information
        to the cluster.\n\nCreate the pgo namespace if it does not exist already.
        This single namespace is where the operator should be deployed to. Postgres
        clusters will also be deployed here.\n\n```\nkubectl create namespace pgo
        \n```\n\nCreate the `pgo-backrest-repo-config` Secret that is used by the
        operator.\n\n```\nkubectl create secret generic -n pgo pgo-backrest-repo-config
        \\\n  --from-file=config=$PGOROOT/conf/pgo-backrest-repo/config \\\n\t--from-file=sshd_config=$PGOROOT/conf/pgo-backrest-repo/sshd_config
        \\\n  --from-file=aws-s3-credentials.yaml=$PGOROOT/conf/pgo-backrest-repo/aws-s3-credentials.yaml
        \\\n  --from-file=aws-s3-ca.crt=$PGOROOT/conf/pgo-backrest-repo/aws-s3-ca.crt\n\n\n```\n\nCreate
        the `pgo-auth-secret` Secret that is used by the operator.\n\n```\nkubectl
        create secret generic -n pgo pgo-auth-secret \\\n  --from-file=server.crt=$PGOROOT/conf/postgres-operator/server.crt
        \\\n  --from-file=server.key=$PGOROOT/conf/postgres-operator/server.key \\\n```\n\nInstall
        the bootstrap credentials: \n\n```\n $PGOROOT/deploy/install-bootstrap-creds.sh\n```
        \n\nRemove existing credentials for pgo-apiserver TLS REST API, if they exist.\n\n```\nkubectl
        delete secret -n pgo tls pgo.tls\n``` \n\nCreate credentials for pgo-apiserver
        TLS REST API\n```\nkubectl create secret -n pgo tls pgo.tls \\\n  --key=$PGOROOT/conf/postgres-operator/server.key
        \\\n  --cert=$PGOROOT/conf/postgres-operator/server.crt\n```\n\nCreate the
        `pgo-config` ConfigMap that is used by the operator.\n\n```\nkubectl create
        configmap -n pgo pgo-config \\\n--from-file=$PGOROOT/conf/postgres-operator\n\n```\n\nOnce
        these resources are in place, the operator can be installed into the cluster.\n\n##
        After You Install\n\nOnce the operator is installed in the cluster, you will
        need to perform several steps to enable usage.\n\n### Service\n\n```\nkubectl
        expose deployment -n pgo postgres-operator --type=LoadBalancer\n```\n\nFor
        the pgo client to communicate with the operator, it needs to know where to
        connect. Export the service url as the PGO_APISERVER_URL for the pgo client
        in the shell\n\n```\nexport PGO_APISERVER_URL=https://<url of exposed service>:8443\n```\n\n###
        Security\n\nWhen postgres operator deploys, it creates a set of certificates
        the pgo client will need to communicate. \n\n### Client Certificates\n\nCopy
        the client certificates from the apiserver to the local environment - we use
        /tmp for this example. \n\n```\nkubectl cp <pgo-namespace>/<postgres-operator-pod>:/tmp/server.key
        /tmp/server.key -c apiserver\nkubectl cp <pgo-namespace>/<postgres-operator-pod>:/tmp/server.crt
        /tmp/server.crt -c apiserver\n```\n\nConfigure the shell for the pgo command
        line to use the certificates\n\n```\nexport PGO_CA_CERT=/tmp/server.crt\nexport
        PGO_CLIENT_CERT=/tmp/server.crt\nexport PGO_CLIENT_KEY=/tmp/server.key\n```\n"
      displayName: Crunchy PostgreSQL Enterprise
      installModes:
      - supported: true
        type: OwnNamespace
      - supported: true
        type: SingleNamespace
      - supported: false
        type: MultiNamespace
      - supported: false
        type: AllNamespaces
      keywords:
      - postgres
      - app
      links:
      - name: Crunchy Data
        url: https://crunchydata.com
      - name: Crunchy Postgres Operator v4.1 Quick Deploy
        url: https://github.com/CrunchyData/postgres-operator/tree/develop/examples/olm
      maintainers:
      - email: support@crunchydata.com
        name: Crunchy Data
      maturity: stable
      minKubeVersion: 1.11.0
      provider:
        name: CrunchyData.com
      relatedImages:
      - crunchydata/pgo-scheduler:centos7-4.1.0
      - crunchydata/postgres-operator:centos7-4.1.0
      - crunchydata/pgo-apiserver:centos7-4.1.0
      - crunchydata/pgo-event:centos7-4.1.0
      version: 4.1.0
    name: original_41
  - currentCSV: postgresoperator.v4.2.2
    currentCSVDesc:
      annotations:
        alm-examples: |-
          [
            {
              "apiVersion": "crunchydata.com/v1",
              "kind": "Pgcluster",
              "metadata": {
                "labels": {
                  "archive": "false"
                },
                "name": "example"
              },
              "spec": {
                "PrimaryStorage": {
                  "accessmode": "ReadWriteOnce",
                  "size": "1G",
                  "storageclass": "standard",
                  "storagetype": "dynamic"
                },
                "ccpimage": "crunchy-postgres-ha",
                "ccpimagetag": "centos7-12.2-4.2.2",
                "clustername": "example",
                "database": "example",
                "exporterport": "9187",
                "name": "example",
                "pgbadgerport": "10000",
                "port": "5432",
                "primarysecretname": "example-primaryuser",
                "rootsecretname": "example-postgresuser",
                "userlabels": {
                  "archive": "false"
                },
                "usersecretname": "example-primaryuser"
              }
            },
            {
              "apiVersion": "crunchydata.com/v1",
              "kind": "Pgreplica",
              "metadata": {
                "name": "example"
              },
              "spec": {},
              "status": {}
            },
            {
              "apiVersion": "crunchydata.com/v1",
              "kind": "Pgpolicy",
              "metadata": {
                "name": "example"
              },
              "spec": {},
              "status": {}
            },
            {
              "apiVersion": "crunchydata.com/v1",
              "kind": "Pgtask",
              "metadata": {
                "name": "example"
              },
              "spec": {}
            },
            {
              "apiVersion": "crunchydata.com/v1",
              "kind": "Pgbackup",
              "metadata": {
                "name": "example"
              },
              "spec": {},
              "status": {}
            }
          ]
        capabilities: Auto Pilot
        categories: Database
        certified: "false"
        containerImage: crunchydata/postgres-operator:centos7-4.2.2
        createdAt: 2019-12-31 19:40Z
        description: Enterprise open source PostgreSQL-as-a-Service
        operatorhub.io/ui-metadata-max-k8s-version: "1.21"
        repository: https://github.com/CrunchyData/postgres-operator
        support: crunchydata.com
      apiservicedefinitions: {}
      customresourcedefinitions:
        owned:
        - description: Represents a Postgres primary cluster member
          displayName: Postgres Primary Cluster Member
          kind: Pgcluster
          name: pgclusters.crunchydata.com
          version: v1
        - description: Represents a Postgres replica cluster member
          displayName: Postgres Replica Cluster Member
          kind: Pgreplica
          name: pgreplicas.crunchydata.com
          version: v1
        - description: Represents a Postgres sql policy
          displayName: Postgres SQL Policy
          kind: Pgpolicy
          name: pgpolicies.crunchydata.com
          version: v1
        - description: Represents a Postgres workflow task
          displayName: Postgres workflow task
          kind: Pgtask
          name: pgtasks.crunchydata.com
          version: v1
        - description: Represents a Postgres backup task
          displayName: Postgres backup task
          kind: Pgbackup
          name: pgbackups.crunchydata.com
          version: v1
      description: |-
        Crunchy PostgreSQL for Kubernetes lets you run your own production-grade PostgreSQL-as-a-Service on Kubernetes!

        Powered by the Crunchy [PostgreSQL Operator](https://github.com/CrunchyData/postgres-operator), Crunchy PostgreSQL
        for Kubernetes automates and simplifies deploying and managing open source PostgreSQL clusters on Kubernetes by providing the
        essential features you need to keep your PostgreSQL clusters up and running, including:

        - **PostgreSQL Cluster Provisioning**: [Create, Scale, & Delete PostgreSQL clusters with ease][provisioning],
        while fully customizing your Pods and PostgreSQL configuration!
        - **High-Availability**: Safe, automated failover backed by a [distributed consensus based high-availability solution][high-availability].
        Uses [Pod Anti-Affinity][anti-affinity] to help resiliency; you can configure how aggressive this can be!
        Failed primaries automatically heal, allowing for faster recovery time. You can even create regularly scheduled
        backups as well and set your backup retention policy
        - **Disaster Recovery**: Backups and restores leverage the open source [pgBackRest][] utility
        and [includes support for full, incremental, and differential backups as well as efficient delta restores][disaster-recovery].
        Set how long you want your backups retained for. Works great with very large databases!
        - **Monitoring**: Track the health of your PostgreSQL clusters using the open source [pgMonitor][] library.
        - **Clone**: Create new clusters from your existing clusters with a simple [`pgo clone`][pgo-clone] command.
        - **Full Customizability**: Crunchy PostgreSQL for Kubernetes makes it easy to get your own PostgreSQL-as-a-Service up and running on
        and lets make further enhancements to customize your deployments, including:
          - Selecting different storage classes for your primary, replica, and backup storage
          - Select your own container resources class for each PostgreSQL cluster deployment; differentiate between resources applied for primary and replica clusters!
          - Use your own container image repository, including support `imagePullSecrets` and private repositories
          - Bring your own trusted certificate authority (CA) for use with the Operator API server
          - Override your PostgreSQL configuration for each cluster

        and much more!

        [anti-affinity]: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity
        [disaster-recovery]: https://access.crunchydata.com/documentation/postgres-operator/latest/architecture/disaster-recovery/
        [high-availability]: https://access.crunchydata.com/documentation/postgres-operator/latest/architecture/high-availability/
        [pgo-clone]: https://access.crunchydata.com/documentation/postgres-operator/latest/pgo-client/reference/pgo_clone/
        [provisioning]: https://access.crunchydata.com/documentation/postgres-operator/latest/architecture/provisioning/

        [pgBackRest]: https://www.pgbackrest.org
        [pgMonitor]: https://github.com/CrunchyData/pgmonitor

        ## Before You Begin

        There are several manual steps that the cluster administrator must perform prior to installing the operator. The
        operator must be provided with an initial configuration to run in the cluster, as well as certificates and
        credentials that need to be generated.

        Start by cloning the operator repository locally.

        ```
        git clone -b v4.2.2 https://github.com/CrunchyData/postgres-operator.git
        cd postgres-operator
        ```

        ### PostgreSQL Operator Configuration

        Edit `conf/postgres-operator/pgo.yaml` to configure the operator deployment. Look over all of the options and make any
        changes necessary for your environment.

        #### Image

        Update the `CCPImageTag` tag to configure the PostgreSQL image being used, updating for the version of PostgreSQL as needed.

        ```
        CCPImageTag:  centos7-12.2-4.2.2
        ```

        #### Storage

        Configure the backend storage for the Persistent Volumes used by each PostgreSQL cluster. Depending on the type of persistent
        storage you wish to make available, adjust the `StorageClass` as necessary. For example, to deploy on AWS using `gp2`, you
        would set the following:

        ```
        storageos:
          AccessMode:  ReadWriteOnce
          Size:  1G
          StorageType:  dynamic
          StorageClass:  gp2
          Fsgroup:  26
        ```

        Once the storage backend is defined, enable the new storage option as needed.

        ```
        PrimaryStorage: storageos
        ReplicaStorage: storageos
        BackrestStorage: storageos
        ```

        ### Certificates

        You will need to either generate new TLS certificates or use existing certificates for the operator API.

        You can generate new self-signed certificates using scripts in the operator repository.

        ```
        export PGOROOT=$(pwd)
        cd $PGOROOT/deploy
        $PGOROOT/deploy/gen-api-keys.sh
        $PGOROOT/deploy/gen-sshd-keys.sh
        cd $PGOROOT
        ```

        ### Configuration and Secrets

        Once the configuration changes have been updated and certificates are in place, we can save the information to the cluster.

        Create the pgo namespace if it does not exist already. This single namespace is where the operator should be deployed to. PostgreSQL clusters will also be deployed here.

        ```
        kubectl create namespace pgo
        ```

        Create the `pgo-backrest-repo-config` Secret that is used by the operator.

        ```
        kubectl create secret generic -n pgo pgo-backrest-repo-config \
          --from-file=config=$PGOROOT/conf/pgo-backrest-repo/config \
          --from-file=sshd_config=$PGOROOT/conf/pgo-backrest-repo/sshd_config \
          --from-file=aws-s3-credentials.yaml=$PGOROOT/conf/pgo-backrest-repo/aws-s3-credentials.yaml \
          --from-file=aws-s3-ca.crt=$PGOROOT/conf/pgo-backrest-repo/aws-s3-ca.crt
        ```

        Create the `pgo-auth-secret` Secret that is used by the operator.

        ```
        kubectl create secret generic -n pgo pgo-auth-secret \
          --from-file=server.crt=$PGOROOT/conf/postgres-operator/server.crt \
          --from-file=server.key=$PGOROOT/conf/postgres-operator/server.key
        ```

        Install the bootstrap credentials:

        ```
        $PGOROOT/deploy/install-bootstrap-creds.sh
        ```

        Remove existing credentials for pgo-apiserver TLS REST API, if they exist.

        ```
        kubectl delete secret -n pgo tls pgo.tls
        ```

        Create credentials for pgo-apiserver TLS REST API
        ```
        kubectl create secret -n pgo tls pgo.tls \
          --key=$PGOROOT/conf/postgres-operator/server.key \
          --cert=$PGOROOT/conf/postgres-operator/server.crt
        ```

        Create the `pgo-config` ConfigMap that is used by the operator.

        ```
        kubectl create configmap -n pgo pgo-config \
          --from-file=$PGOROOT/conf/postgres-operator
        ```

        Once these resources are in place, the operator can be installed into the cluster.

        ## After You Install

        Once the operator is installed in the cluster, you will need to perform several steps to enable usage.

        ### Service

        ```
        kubectl expose deployment -n pgo postgres-operator --type=LoadBalancer
        ```

        For the pgo client to communicate with the operator, it needs to know where to connect.
        Export the service URL as `PGO_APISERVER_URL` in the shell.

        ```
        export PGO_APISERVER_URL=https://<url of exposed service>:8443
        ```

        ### Security

        When postgres operator deploys, it creates a set of certificates the pgo client will need to communicate.

        ### Client Certificates

        Copy the client certificates from the apiserver to the local environment - we use /tmp for this example.

        ```
        kubectl cp <pgo-namespace>/<postgres-operator-pod>:/tmp/server.key /tmp/server.key -c apiserver
        kubectl cp <pgo-namespace>/<postgres-operator-pod>:/tmp/server.crt /tmp/server.crt -c apiserver
        ```

        Configure the shell for the pgo command line to use the certificates

        ```
        export PGO_CA_CERT=/tmp/server.crt
        export PGO_CLIENT_CERT=/tmp/server.crt
        export PGO_CLIENT_KEY=/tmp/server.key
        ```
      displayName: Crunchy PostgreSQL for Kubernetes
      installModes:
      - supported: true
        type: OwnNamespace
      - supported: true
        type: SingleNamespace
      - supported: true
        type: MultiNamespace
      - supported: false
        type: AllNamespaces
      keywords:
      - postgres
      - postgresql
      - database
      - sql
      - operator
      - crunchy data
      links:
      - name: Crunchy Data
        url: https://www.crunchydata.com/
      - name: Documentation
        url: https://access.crunchydata.com/documentation/postgres-operator/
      maintainers:
      - email: info@crunchydata.com
        name: Crunchy Data
      maturity: stable
      minKubeVersion: 1.11.0
      provider:
        name: Crunchy Data
      relatedImages:
      - crunchydata/pgo-apiserver:centos7-4.2.2
      - crunchydata/postgres-operator:centos7-4.2.2
      - crunchydata/pgo-scheduler:centos7-4.2.2
      - crunchydata/pgo-event:centos7-4.2.2
      version: 4.2.2
    name: original_42
  - currentCSV: postgresoperator.v4.3.2
    currentCSVDesc:
      annotations:
        alm-examples: |-
          [
            {
              "apiVersion": "crunchydata.com/v1",
              "kind": "Pgcluster",
              "metadata": {
                "labels": {
                  "archive": "false"
                },
                "name": "example"
              },
              "spec": {
                "PrimaryStorage": {
                  "accessmode": "ReadWriteOnce",
                  "size": "1G",
                  "storageclass": "standard",
                  "storagetype": "dynamic"
                },
                "ccpimage": "crunchy-postgres-ha",
                "ccpimagetag": "centos7-12.3-4.3.2",
                "clustername": "example",
                "database": "example",
                "exporterport": "9187",
                "name": "example",
                "pgbadgerport": "10000",
                "port": "5432",
                "primarysecretname": "example-primaryuser",
                "rootsecretname": "example-postgresuser",
                "userlabels": {
                  "archive": "false"
                },
                "usersecretname": "example-primaryuser"
              }
            },
            {
              "apiVersion": "crunchydata.com/v1",
              "kind": "Pgreplica",
              "metadata": {
                "name": "example"
              },
              "spec": {},
              "status": {}
            },
            {
              "apiVersion": "crunchydata.com/v1",
              "kind": "Pgpolicy",
              "metadata": {
                "name": "example"
              },
              "spec": {},
              "status": {}
            },
            {
              "apiVersion": "crunchydata.com/v1",
              "kind": "Pgtask",
              "metadata": {
                "name": "example"
              },
              "spec": {}
            }
          ]
        capabilities: Auto Pilot
        categories: Database
        certified: "false"
        containerImage: registry.developers.crunchydata.com/crunchydata/postgres-operator:centos7-4.3.2
        createdAt: 2019-12-31 19:40Z
        description: Enterprise open source PostgreSQL-as-a-Service
        operatorhub.io/ui-metadata-max-k8s-version: "1.21"
        repository: https://github.com/CrunchyData/postgres-operator
        support: crunchydata.com
      apiservicedefinitions: {}
      customresourcedefinitions:
        owned:
        - description: Represents a Postgres primary cluster member
          displayName: Postgres Primary Cluster Member
          kind: Pgcluster
          name: pgclusters.crunchydata.com
          version: v1
        - description: Represents a Postgres replica cluster member
          displayName: Postgres Replica Cluster Member
          kind: Pgreplica
          name: pgreplicas.crunchydata.com
          version: v1
        - description: Represents a Postgres sql policy
          displayName: Postgres SQL Policy
          kind: Pgpolicy
          name: pgpolicies.crunchydata.com
          version: v1
        - description: Represents a Postgres workflow task
          displayName: Postgres workflow task
          kind: Pgtask
          name: pgtasks.crunchydata.com
          version: v1
      description: |-
        Crunchy PostgreSQL for Kubernetes lets you run your own production-grade PostgreSQL-as-a-Service on Kubernetes!

        Powered by the Crunchy [PostgreSQL Operator](https://github.com/CrunchyData/postgres-operator), Crunchy PostgreSQL
        for Kubernetes automates and simplifies deploying and managing open source PostgreSQL clusters on Kubernetes by providing the
        essential features you need to keep your PostgreSQL clusters up and running, including:

        - **PostgreSQL Cluster Provisioning**: [Create, Scale, & Delete PostgreSQL clusters with ease][provisioning],
        while fully customizing your Pods and PostgreSQL configuration!
        - **High-Availability**: Safe, automated failover backed by a [distributed consensus based high-availability solution][high-availability].
        Uses [Pod Anti-Affinity][anti-affinity] to help resiliency; you can configure how aggressive this can be!
        Failed primaries automatically heal, allowing for faster recovery time. You can even create regularly scheduled
        backups as well and set your backup retention policy
        - **Disaster Recovery**: Backups and restores leverage the open source [pgBackRest][] utility
        and [includes support for full, incremental, and differential backups as well as efficient delta restores][disaster-recovery].
        Set how long you want your backups retained for. Works great with very large databases!
        - **Monitoring**: Track the health of your PostgreSQL clusters using the open source [pgMonitor][] library.
        - **Clone**: Create new clusters from your existing clusters with a simple [`pgo clone`][pgo-clone] command.
        - **Full Customizability**: Crunchy PostgreSQL for Kubernetes makes it easy to get your own PostgreSQL-as-a-Service up and running on
        and lets make further enhancements to customize your deployments, including:
          - Selecting different storage classes for your primary, replica, and backup storage
          - Select your own container resources class for each PostgreSQL cluster deployment; differentiate between resources applied for primary and replica clusters!
          - Use your own container image repository, including support `imagePullSecrets` and private repositories
          - Bring your own trusted certificate authority (CA) for use with the Operator API server
          - Override your PostgreSQL configuration for each cluster

        and much more!

        [anti-affinity]: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity
        [disaster-recovery]: https://access.crunchydata.com/documentation/postgres-operator/latest/architecture/disaster-recovery/
        [high-availability]: https://access.crunchydata.com/documentation/postgres-operator/latest/architecture/high-availability/
        [pgo-clone]: https://access.crunchydata.com/documentation/postgres-operator/latest/pgo-client/reference/pgo_clone/
        [provisioning]: https://access.crunchydata.com/documentation/postgres-operator/latest/architecture/provisioning/

        [pgBackRest]: https://www.pgbackrest.org
        [pgMonitor]: https://github.com/CrunchyData/pgmonitor


        ## Before You Begin

        There are a few manual steps that the cluster administrator must perform prior to installing the PostgreSQL Operator.
        At the very least, it must be provided with an initial configuration.

        First, select a namespace in which to install the PostgreSQL Operator. PostgreSQL clusters will also be deployed here.
        If it does not exist, create it now.

        ```
        export PGO_OPERATOR_NAMESPACE=pgo
        kubectl create namespace "$PGO_OPERATOR_NAMESPACE"
        ```

        Next, clone the PostgreSQL Operator repository locally.

        ```
        git clone -b v4.3.2 https://github.com/CrunchyData/postgres-operator.git
        cd postgres-operator
        ```

        ### PostgreSQL Operator Configuration

        Edit `conf/postgres-operator/pgo.yaml` to configure the deployment. Look over all of the options and make any
        changes necessary for your environment. A [full description of each option][pgo-yaml-reference] is available in the documentation.

        [pgo-yaml-reference]: https://access.crunchydata.com/documentation/postgres-operator/4.3.2/configuration/pgo-yaml-configuration/

        When the file is ready, upload the entire directory to the `pgo-config` ConfigMap.

        ```
        kubectl -n "$PGO_OPERATOR_NAMESPACE" create configmap pgo-config \
          --from-file=./conf/postgres-operator
        ```

        ### Secrets

        Configure pgBackRest for your environment. If you do not plan to use AWS S3 to store backups, you can omit
        the `aws-s3` keys below.

        ```
        kubectl -n "$PGO_OPERATOR_NAMESPACE" create secret generic pgo-backrest-repo-config \
          --from-file=config=./conf/pgo-backrest-repo/config \
          --from-file=sshd_config=./conf/pgo-backrest-repo/sshd_config \
          --from-file=aws-s3-ca.crt=./conf/pgo-backrest-repo/aws-s3-ca.crt \
          --from-literal=aws-s3-key="<your-aws-s3-key>" \
          --from-literal=aws-s3-key-secret="<your-aws-s3-key-secret>"
        ```

        ### Certificates (optional)

        The PostgreSQL Operator has an API that uses TLS to communicate securely with clients. If you have
        a certificate bundle validated by your organization, you can install it now.  If not, the API will
        automatically generate and use a self-signed certificate.

        ```
        kubectl -n "$PGO_OPERATOR_NAMESPACE" create secret tls pgo.tls \
          --cert=/path/to/server.crt \
          --key=/path/to/server.key
        ```

        Once these resources are in place, the PostgreSQL Operator can be installed into the cluster.


        ## After You Install

        Once the PostgreSQL Operator is installed in your Kubernetes cluster, you will need to do a few things
        to use the [PostgreSQL Operator Client][pgo-client].

        [pgo-client]: https://access.crunchydata.com/documentation/postgres-operator/latest/pgo-client/

        Install the first set of client credentials and download the `pgo` binary and client certificates.

        ```
        PGO_CMD=kubectl ./deploy/install-bootstrap-creds.sh
        PGO_CMD=kubectl ./installers/kubectl/client-setup.sh
        ```

        The client needs to be able to reach the PostgreSQL Operator API from outside the Kubernetes cluster.
        Create an external service or forward a port locally.

        ```
        kubectl -n "$PGO_OPERATOR_NAMESPACE" expose deployment postgres-operator --type=LoadBalancer

        export PGO_APISERVER_URL="https://$(
          kubectl -n "$PGO_OPERATOR_NAMESPACE" get service postgres-operator \
            -o jsonpath="{.status.loadBalancer.ingress[*]['ip','hostname']}"
        ):8443"
        ```
        _or_
        ```
        kubectl -n "$PGO_OPERATOR_NAMESPACE" port-forward deployment/postgres-operator 8443

        export PGO_APISERVER_URL="https://127.0.0.1:8443"
        ```

        Verify connectivity using the `pgo` command.

        ```
        pgo version
        # pgo client version 4.3.2
        # pgo-apiserver version 4.3.2
        ```
      displayName: Crunchy PostgreSQL for Kubernetes
      installModes:
      - supported: true
        type: OwnNamespace
      - supported: true
        type: SingleNamespace
      - supported: true
        type: MultiNamespace
      - supported: false
        type: AllNamespaces
      keywords:
      - postgres
      - postgresql
      - database
      - sql
      - operator
      - crunchy data
      links:
      - name: Crunchy Data
        url: https://www.crunchydata.com/
      - name: Documentation
        url: https://access.crunchydata.com/documentation/postgres-operator/
      maintainers:
      - email: info@crunchydata.com
        name: Crunchy Data
      maturity: stable
      minKubeVersion: 1.11.0
      provider:
        name: Crunchy Data
      relatedImages:
      - registry.developers.crunchydata.com/crunchydata/pgo-apiserver:centos7-4.3.2
      - registry.developers.crunchydata.com/crunchydata/postgres-operator:centos7-4.3.2
      - registry.developers.crunchydata.com/crunchydata/pgo-scheduler:centos7-4.3.2
      - registry.developers.crunchydata.com/crunchydata/pgo-event:centos7-4.3.2
      version: 4.3.2
    name: original_43
  - currentCSV: postgresoperator.v4.7.5
    currentCSVDesc:
      annotations:
        alm-examples: |-
          [
            {
              "apiVersion": "crunchydata.com/v1",
              "kind": "Pgcluster",
              "metadata": {
                "annotations": {
                  "current-primary": "hippo"
                },
                "name": "hippo",
                "labels": {
                  "crunchy-pgha-scope": "hippo",
                  "deployment-name": "hippo",
                  "name": "hippo",
                  "namespace": "pgo",
                  "pg-cluster": "hippo",
                  "pgo-version": "4.7.5"
                }
              },
              "spec": {
                "name": "hippo",
                "namespace": "pgo",
                "clustername": "hippo",
                "ccpimage": "crunchy-postgres-ha",
                "ccpimagetag": "centos8-13.6-4.7.5",
                "BackrestStorage": {
                  "accessmode": "ReadWriteMany",
                  "matchLabels": "",
                  "name": "",
                  "size": "5Gi",
                  "storageclass": "",
                  "storagetype": "dynamic",
                  "supplementalgroups": ""
                },
                "PrimaryStorage": {
                  "accessmode": "ReadWriteMany",
                  "matchLabels": "",
                  "name": "hippo",
                  "size": "5Gi",
                  "storageclass": "",
                  "storagetype": "dynamic",
                  "supplementalgroups": ""
                },
                "ReplicaStorage": {
                  "accessmode": "ReadWriteMany",
                  "matchLabels": "",
                  "name": "",
                  "size": "5Gi",
                  "storageclass": "",
                  "storagetype": "dynamic",
                  "supplementalgroups": ""
                },
                "database": "hippo",
                "exporterport": "9187",
                "pgbadgerport": "10000",
                "podAntiAffinity": {
                  "default": "preferred"
                },
                "port": "5432",
                "user": "hippo",
                "userlabels": {
                  "pgo-version": "4.7.5"
                }
              }
            },
            {
              "apiVersion": "crunchydata.com/v1",
              "kind": "Pgreplica",
              "metadata": {
                "name": "example"
              },
              "spec": {},
              "status": {}
            },
            {
              "apiVersion": "crunchydata.com/v1",
              "kind": "Pgpolicy",
              "metadata": {
                "name": "example"
              },
              "spec": {},
              "status": {}
            },
            {
              "apiVersion": "crunchydata.com/v1",
              "kind": "Pgtask",
              "metadata": {
                "name": "example"
              },
              "spec": {}
            }
          ]
        capabilities: Auto Pilot
        categories: Database
        certified: "false"
        containerImage: registry.developers.crunchydata.com/crunchydata/postgres-operator:centos8-4.7.5
        createdAt: 2019-12-31 19:40Z
        description: Enterprise open source PostgreSQL-as-a-Service
        operatorhub.io/ui-metadata-max-k8s-version: "1.21"
        repository: https://github.com/CrunchyData/postgres-operator
        support: crunchydata.com
      apiservicedefinitions: {}
      customresourcedefinitions:
        owned:
        - description: Represents a Postgres primary cluster member
          displayName: Postgres Primary Cluster Member
          kind: Pgcluster
          name: pgclusters.crunchydata.com
          version: v1
        - description: Represents a Postgres replica cluster member
          displayName: Postgres Replica Cluster Member
          kind: Pgreplica
          name: pgreplicas.crunchydata.com
          version: v1
        - description: Represents a Postgres sql policy
          displayName: Postgres SQL Policy
          kind: Pgpolicy
          name: pgpolicies.crunchydata.com
          version: v1
        - description: Represents a Postgres workflow task
          displayName: Postgres workflow task
          kind: Pgtask
          name: pgtasks.crunchydata.com
          version: v1
      description: |-
        Crunchy PostgreSQL for Kubernetes lets you run your own production-grade PostgreSQL-as-a-Service on Kubernetes!

        Powered by the Crunchy [PostgreSQL Operator](https://github.com/CrunchyData/postgres-operator), Crunchy PostgreSQL
        for Kubernetes automates and simplifies deploying and managing open source PostgreSQL clusters on Kubernetes by
        providing the essential features you need to keep your PostgreSQL clusters up and running, including:

        - **PostgreSQL Cluster Provisioning**: [Create, Scale, & Delete PostgreSQL clusters with ease][provisioning],
          while fully customizing your Pods and PostgreSQL configuration!
        - **High-Availability**: Safe, automated failover backed by a [distributed consensus based high-availability solution][high-availability].
          Uses [Pod Anti-Affinity][k8s-anti-affinity] to help resiliency; you can configure how aggressive this can be!
          Failed primaries automatically heal, allowing for faster recovery time. You can even create regularly scheduled
          backups as well and set your backup retention policy
        - **Disaster Recovery**: Backups and restores leverage the open source [pgBackRest][] utility
          and [includes support for full, incremental, and differential backups as well as efficient delta restores][disaster-recovery].
          Set how long you want your backups retained for. Works great with very large databases!
        - **Monitoring**: Track the health of your PostgreSQL clusters using the open source [pgMonitor][] library.
        - **Clone**: Create new clusters from your existing clusters or backups with a single [`pgo create cluster --restore-from`][pgo-create-cluster] command.
        - **TLS**: Secure communication between your applications and data servers by [enabling TLS for your PostgreSQL servers][pgo-task-tls], including the ability to enforce that all of your connections to use TLS.
        - **Connection Pooling**: Use [pgBouncer][] for connection pooling
        - **Affinity and Tolerations**: Have your PostgreSQL clusters deployed to [Kubernetes Nodes][k8s-nodes] of your preference with [node affinity][high-availability-node-affinity], or designate which nodes Kubernetes can schedule PostgreSQL instances to with Kubernetes [tolerations][high-availability-tolerations].
        - **Full Customizability**: Crunchy PostgreSQL for Kubernetes makes it easy to get your own PostgreSQL-as-a-Service up and running on
          and lets make further enhancements to customize your deployments, including:
            - Selecting different storage classes for your primary, replica, and backup storage
            - Select your own container resources class for each PostgreSQL cluster deployment; differentiate between resources applied for primary and replica clusters!
            - Use your own container image repository, including support `imagePullSecrets` and private repositories
            - Bring your own trusted certificate authority (CA) for use with the Operator API server
            - Override your PostgreSQL configuration for each cluster

        and much more!

        [disaster-recovery]: https://access.crunchydata.com/documentation/postgres-operator/latest/architecture/disaster-recovery/
        [high-availability]: https://access.crunchydata.com/documentation/postgres-operator/latest/architecture/high-availability/
        [high-availability-node-affinity]: https://access.crunchydata.com/documentation/postgres-operator/latest/architecture/high-availability/#node-affinity
        [high-availability-tolerations]: https://access.crunchydata.com/documentation/postgres-operator/latest/architecture/high-availability/#tolerations
        [pgo-create-cluster]: https://access.crunchydata.com/documentation/postgres-operator/latest/pgo-client/reference/pgo_create_cluster/
        [pgo-task-tls]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorial/tls/
        [provisioning]: https://access.crunchydata.com/documentation/postgres-operator/latest/architecture/provisioning/

        [k8s-anti-affinity]: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity
        [k8s-nodes]: https://kubernetes.io/docs/concepts/architecture/nodes/

        [pgBackRest]: https://www.pgbackrest.org
        [pgBouncer]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorial/pgbouncer/
        [pgMonitor]: https://github.com/CrunchyData/pgmonitor


        ## Pre-Installation

        There are a few manual steps that the cluster administrator must perform prior to installing the PostgreSQL Operator.
        At the very least, it must be provided with an initial configuration.

        First, select a namespace in which to install the PostgreSQL Operator. PostgreSQL clusters will also be deployed here.
        If it does not exist, create it now.

        ```
        export PGO_OPERATOR_NAMESPACE=pgo
        kubectl create namespace "$PGO_OPERATOR_NAMESPACE"
        ```

        ### Secrets (optional)

        If you plan to use AWS S3 to store backups, you can configure your environment to automatically provide your AWS S3 credentials to all newly created PostgreSQL clusters:

        ```
        kubectl -n "$PGO_OPERATOR_NAMESPACE" create secret generic pgo-backrest-repo-config \
          --from-literal=aws-s3-key="<your-aws-s3-key>" \
          --from-literal=aws-s3-key-secret="<your-aws-s3-key-secret>"
        kubectl -n "$PGO_OPERATOR_NAMESPACE" label secret pgo-backrest-repo-config vendor=crunchydata
        ```

        ### Certificates (optional)

        The PostgreSQL Operator has an API that uses TLS to communicate securely with clients. If one is not provided, the API will automatically generated one for you.

        If you have a certificate bundle validated by your organization, you can install it now.

        ```
        kubectl -n "$PGO_OPERATOR_NAMESPACE" create secret tls pgo.tls \
          --cert=/path/to/server.crt \
          --key=/path/to/server.key
        ```

        Once these resources are in place, the PostgreSQL Operator can be installed into the cluster.

        ## Installation

        You can now go ahead and install the PostgreSQL Operator from OperatorHub.

        ## Post-Installation

        ### Tutorial

        For a guide on how to perform many of the daily functions of the PostgreSQL Operator, we recommend that you read the [Postgres Operator tutorial][pgo-tutorial]

        [pgo-tutorial]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorial/create-cluster/

        However, the below guide will show you how to create a Postgres cluster from a custom resource or from using the `pgo-client`.

        ### Create a PostgreSQL Cluster from a Custom Resource

        The fundamental workflow for interfacing with a PostgreSQL Operator Custom
        Resource Definition is for creating a PostgreSQL cluster. There are several
        that a PostgreSQL cluster requires to be deployed, including:

        - Secrets
          - Information for setting up a pgBackRest repository
          - PostgreSQL superuser bootstrap credentials
          - PostgreSQL replication user bootstrap credentials
          - PostgresQL standard user bootstrap credentials

        Additionally, if you want to add some of the other sidecars, you may need to
        create additional secrets.

        The good news is that if you do not provide these objects, the PostgreSQL
        Operator will create them for you to get your Postgres cluster up and running!

        The following goes through how to create a PostgreSQL cluster called
        `hippo` by creating a new custom resource.

        ```
        # this variable is the name of the cluster being created
        export pgo_cluster_name=hippo
        # this variable is the namespace the cluster is being deployed into
        export cluster_namespace=pgo
        # this variable is set to the location of your image repository
        export cluster_image_prefix=registry.developers.crunchydata.com/crunchydata

        cat <<-EOF > "${pgo_cluster_name}-pgcluster.yaml"
        apiVersion: crunchydata.com/v1
        kind: Pgcluster
        metadata:
          annotations:
            current-primary: ${pgo_cluster_name}
          labels:
            crunchy-pgha-scope: ${pgo_cluster_name}
            deployment-name: ${pgo_cluster_name}
            name: ${pgo_cluster_name}
            pg-cluster: ${pgo_cluster_name}
            pgo-version: 4.7.5
            pgouser: admin
          name: ${pgo_cluster_name}
          namespace: ${cluster_namespace}
        spec:
          BackrestStorage:
            accessmode: ReadWriteMany
            matchLabels: ""
            name: ""
            size: 1G
            storageclass: ""
            storagetype: create
            supplementalgroups: ""
          PrimaryStorage:
            accessmode: ReadWriteMany
            matchLabels: ""
            name: ${pgo_cluster_name}
            size: 1G
            storageclass: ""
            storagetype: create
            supplementalgroups: ""
          ReplicaStorage:
            accessmode: ReadWriteMany
            matchLabels: ""
            name: ""
            size: 1G
            storageclass: ""
            storagetype: create
            supplementalgroups: ""
          annotations: {}
          ccpimage: crunchy-postgres-ha
          ccpimageprefix: ${cluster_image_prefix}
          ccpimagetag: centos8-13.6-4.7.5
          clustername: ${pgo_cluster_name}
          database: ${pgo_cluster_name}
          exporterport: "9187"
          limits: {}
          name: ${pgo_cluster_name}
          pgDataSource:
            restoreFrom: ""
            restoreOpts: ""
          pgbadgerport: "10000"
          pgoimageprefix: ${cluster_image_prefix}
          podAntiAffinity:
            default: preferred
            pgBackRest: preferred
            pgBouncer: preferred
          port: "5432"
          tolerations: []
          user: hippo
          userlabels:
            pgo-version: 4.7.5
        EOF

        kubectl apply -f "${pgo_cluster_name}-pgcluster.yaml"
        ```

        And that's all! The PostgreSQL Operator will go ahead and create the cluster.

        If you have the PostgreSQL client `psql` installed on your host machine, you can
        test connection to the PostgreSQL cluster using the following command:

        ```
        # namespace that the cluster is running in
        export PGO_OPERATOR_NAMESPACE=pgo
        # name of the cluster
        export pgo_cluster_name=hippo
        # name of the user whose password we want to get
        export pgo_cluster_username=hippo

        # get the password of the user and set it to a recognized psql environmental variable
        export PGPASSWORD=$(kubectl -n "${PGO_OPERATOR_NAMESPACE}" get secrets \
          "${pgo_cluster_name}-${pgo_cluster_username}-secret" -o "jsonpath={.data['password']}" | base64 -d)

        # set up a port-forward either in a new terminal, or in the same terminal in the background:
        kubectl -n pgo port-forward svc/hippo 5432:5432 &

        psql -h localhost -U "${pgo_cluster_username}" "${pgo_cluster_name}"
        ```

        ### Create a PostgreSQL Cluster the `pgo` Client

        Once the PostgreSQL Operator is installed in your Kubernetes cluster, you will need to do a few things
        to use the [PostgreSQL Operator Client][pgo-client].

        [pgo-client]: https://access.crunchydata.com/documentation/postgres-operator/latest/pgo-client/

        Install the first set of client credentials and download the `pgo` binary and client certificates.

        ```
        curl https://raw.githubusercontent.com/CrunchyData/postgres-operator/v4.7.5/deploy/install-bootstrap-creds.sh > install-bootstrap-creds.sh
        curl https://raw.githubusercontent.com/CrunchyData/postgres-operator/v4.7.5/installers/kubectl/client-setup.sh > client-setup.sh

        chmod +x install-bootstrap-creds.sh client-setup.sh

        PGO_CMD=kubectl ./install-bootstrap-creds.sh
        PGO_CMD=kubectl ./client-setup.sh
        ```

        The client needs to be able to reach the PostgreSQL Operator API from outside the Kubernetes cluster.
        Create an external service or forward a port locally.

        ```
        kubectl -n "$PGO_OPERATOR_NAMESPACE" expose deployment postgres-operator --type=LoadBalancer

        export PGO_APISERVER_URL="https://$(
          kubectl -n "$PGO_OPERATOR_NAMESPACE" get service postgres-operator \
            -o jsonpath="{.status.loadBalancer.ingress[*]['ip','hostname']}"
        ):8443"
        ```
        _or_
        ```
        kubectl -n "$PGO_OPERATOR_NAMESPACE" port-forward deployment/postgres-operator 8443

        export PGO_APISERVER_URL="https://127.0.0.1:8443"
        ```

        Verify connectivity using the `pgo` command.

        ```
        pgo version
        # pgo client version 4.7.5
        # pgo-apiserver version 4.7.5
        ```

        You can then create a cluster with the `pgo` client as simply as this:

        ```
        pgo create cluster -n pgo hippo
        ```

        The cluster may take a few moments to provision. You can verify that the cluster is up and running by using the `pgo test` command:

        ```
        pgo test cluster -n pgo hippo
        ```

        If you have the PostgreSQL client `psql` installed on your host machine, you can
        test connection to the PostgreSQL cluster using the following command:

        ```
        # namespace that the cluster is running in
        export PGO_OPERATOR_NAMESPACE=pgo
        # name of the cluster
        export pgo_cluster_name=hippo
        # name of the user whose password we want to get
        export pgo_cluster_username=hippo

        # get the password of the user and set it to a recognized psql environmental variable
        export PGPASSWORD=$(kubectl -n "${PGO_OPERATOR_NAMESPACE}" get secrets \
          "${pgo_cluster_name}-${pgo_cluster_username}-secret" -o "jsonpath={.data['password']}" | base64 -d)

        # set up a port-forward either in a new terminal, or in the same terminal in the background:
        kubectl -n pgo port-forward svc/hippo 5432:5432 &

        psql -h localhost -U "${pgo_cluster_username}" "${pgo_cluster_name}"
        ```
      displayName: Crunchy PostgreSQL for Kubernetes
      installModes:
      - supported: true
        type: OwnNamespace
      - supported: true
        type: SingleNamespace
      - supported: true
        type: MultiNamespace
      - supported: false
        type: AllNamespaces
      keywords:
      - postgres
      - postgresql
      - database
      - sql
      - operator
      - crunchy data
      links:
      - name: Crunchy Data
        url: https://www.crunchydata.com/
      - name: Documentation
        url: https://access.crunchydata.com/documentation/postgres-operator/
      maintainers:
      - email: info@crunchydata.com
        name: Crunchy Data
      maturity: stable
      minKubeVersion: 1.11.0
      provider:
        name: Crunchy Data
      relatedImages:
      - registry.developers.crunchydata.com/crunchydata/postgres-operator:centos8-4.7.5
      - registry.developers.crunchydata.com/crunchydata/pgo-scheduler:centos8-4.7.5
      - registry.developers.crunchydata.com/crunchydata/pgo-event:centos8-4.7.5
      - registry.developers.crunchydata.com/crunchydata/pgo-apiserver:centos8-4.7.5
      version: 4.7.5
    name: stable
  defaultChannel: v5
  packageName: postgresql
  provider:
    name: Crunchy Data
    url: https://www.crunchydata.com/
