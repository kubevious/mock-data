apiVersion: packages.operators.coreos.com/v1
kind: PackageManifest
metadata:
  creationTimestamp: "2022-10-03T18:25:13Z"
  labels:
    catalog: operatorhubio-catalog
    catalog-namespace: olm
    operatorframework.io/arch.amd64: supported
    operatorframework.io/os.linux: supported
    provider: Grds Cloud
    provider-url: ""
  name: mysql
  namespace: kube-public
spec: {}
status:
  catalogSource: operatorhubio-catalog
  catalogSourceDisplayName: Community Operators
  catalogSourceNamespace: olm
  catalogSourcePublisher: OperatorHub.io
  channels:
  - currentCSV: mysqloperator.v1.0.0
    currentCSVDesc:
      annotations:
        alm-examples: |-
          [
            {
              "apiVersion": "mysql.grds.cloud/v1",
              "kind": "MysqlCluster",
              "metadata": {
                "name": "mysqlcluster-sample"
              },
              "spec": {
                "clusterSpec": {
                  "mode": "HACluster",
                  "version": "5.7"
                },
                "databaseResource": {
                  "resources": {
                    "limits": {
                      "cpu": "1",
                      "memory": "2Gi"
                    },
                    "requests": {
                      "cpu": "0.5",
                      "memory": "1Gi"
                    }
                  },
                  "storage": {
                    "size": 21474836480
                  }
                },
                "replicas": 2,
                "slaveReplicas": 0
              }
            }
          ]
        capabilities: Full Lifecycle
        categories: Database
        certified: "false"
        containerImage: grds/mysql-operator:1.0.0
        createdAt: 2020-11-10 19:40Z
        description: Enterprise open source MySQL-as-a-Service
        operatorhub.io/ui-metadata-max-k8s-version: "1.21"
        repository: https://github.com/GrdsCloud
        support: grds.cloud
      apiservicedefinitions: {}
      customresourcedefinitions:
        owned:
        - description: MysqlCluster is the Schema for the mysqlclusters API
          displayName: Mysql Cluster
          kind: MysqlCluster
          name: mysqlclusters.mysql.grds.cloud
          version: v1
      description: |-
        With Grds MySQL Operator,you can run MySQL "statelessly" in cloud native environment

        Today more and more users begin to build their applitions based on kubernetes infrastructure，
        we know that MySQL is a typical stateful software app,
        it's not easy to build a scalable and high available MySQL cluster in kubernetes environment.
        now with Grds MySQL Operator,you can run MySQL "statelessly" in cloud native environment,just like your stateless apps.

        Key Feature:
        - **Quickly build** a containered MySQL Cluster or single instance,parameterizable cpu/memory/io configuration.

        - **High-Availability**, automated inspect database failure,align and repair asynced binlog,elect new master instance.

        - **Disaster Recovery**, backup task schedule，onekey media recover.

        - **SlowSQL Analyst**，automated collect and analyze application SQL，supply optimization suggestions.

        ## Before You Begin

        - MySQL operator requires Kubernetes v1.14.x or later.

        - For the [Helm-based installation](#deploy-mysql-operator-with-helm) you need Helm v3.21.0 or later

        ### Deploy the MySQL operator from Kubernetes Manifests

        Complete the following steps to deploy the MySQL operator using Kubernetes manifests. Alternatively, you can also [install the operator using Helm](#deploy-mysql-operator-with-helm).

        1. Create a controlNamespace called "grds".

          ```bash
          kubectl create ns grds
          ```

        2. Create a ServiceAccount and install cluster roles.

          ```bash
          kubectl -n grds create -f https://raw.githubusercontent.com/GrdsCloud/mysql-operator-docs/master/manifests/rbac.yaml
          ```

        3. Apply the ClusterResources.

          ```bash
          kubectl -n grds create -f https://raw.githubusercontent.com/GrdsCloud/mysql-operator-docs/master/manifests/mysql.grds.cloud_mysqlclusters.yaml
          ```

        4. Deploy the MySQL operator.

          ```bash
         kubectl -n grds create -f https://raw.githubusercontent.com/GrdsCloud/mysql-operator-docs/master/manifests/config.yaml
         kubectl -n grds create -f https://raw.githubusercontent.com/GrdsCloud/mysql-operator-docs/master/manifests/deployment.yaml
          ```

        ### Deploy MySQL operator with Helm

        <p align="center"><img src="./images/helm2.svg" width="150"></p>
        <p align="center">

        Complete the following steps to deploy the MySQL operator using Helm.
        Alternatively, you can also [install the operator using Kubernetes manifests.](#deploy-the-mysql-operator-from-kubernetes-manifests)

        > Note: For the Helm-based installation you need [Helm](https://helm.sh/docs/intro/install/#helm) v3.2.4 or later.

        1. Add operator chart repository.
          - Helm v3
          ```bash
          helm repo add grdscloud-stable https://grdscloud.github.io/charts/
          helm repo update
          ```

        2. Install the MySQL Operator

          ```bash
          helm upgrade --install --wait --create-namespace --namespace grds mysql-operator grdscloud-stable/mysql-operator
          ```

        ## After You Install

        Once the MySQL Operator is installed in your Kubernetes cluster

        ### Check the MySQL operator deployment

        To verify that the installation was successful, complete the following steps.

        1. Check the status of the pods. You should see a new mysql-operator pod

          ```bash
          $ kubectl get pods -n grds
          NAME                                        READY   STATUS    RESTARTS   AGE
          mysql-operator-76c44cdc5c-lw4z6             1/1     Running   0          53s
          ```

        2. Check the CRDs. You should see the following MySQL cluster CRDs.
        mysql-cluster-crd.png

          ```bash
          $ kubectl get crd | grep grds
          NAME                                    CREATED AT
          mysqlclusters.mysql.grds.cloud          2020-10-28T09:53:01Z
          ```
      displayName: GrdsCloud MySQL for Kubernetes
      installModes:
      - supported: true
        type: OwnNamespace
      - supported: true
        type: SingleNamespace
      - supported: false
        type: MultiNamespace
      - supported: true
        type: AllNamespaces
      keywords:
      - database
      - sql
      - operator
      - grds cloud
      links:
      - name: Grds Cloud
        url: http://www.grds.cloud
      - name: Documentation
        url: https://github.com/GrdsCloud/mysql-operator-docs
      maintainers:
      - email: info@grds.cloud
        name: Grds Cloud
      maturity: alpha
      minKubeVersion: 1.11.0
      provider:
        name: Grds Cloud
      relatedImages:
      - docker.io/grds/mysql-operator:v1.0.0
      version: 1.0.0
    name: alpha
  defaultChannel: alpha
  packageName: mysql
  provider:
    name: Grds Cloud
