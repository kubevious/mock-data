apiVersion: packages.operators.coreos.com/v1
kind: PackageManifest
metadata:
  creationTimestamp: "2022-10-03T18:25:13Z"
  labels:
    catalog: operatorhubio-catalog
    catalog-namespace: olm
    operatorframework.io/arch.amd64: supported
    operatorframework.io/os.linux: supported
    provider: SDBrett
    provider-url: sdbrett.com
  name: vault-helm
  namespace: local-path-storage
spec: {}
status:
  catalogSource: operatorhubio-catalog
  catalogSourceDisplayName: Community Operators
  catalogSourceNamespace: olm
  catalogSourcePublisher: OperatorHub.io
  channels:
  - currentCSV: vault-helm.v0.0.2
    currentCSVDesc:
      annotations:
        alm-examples: |-
          [
            {
              "apiVersion": "vault.sdbrett.com/v1alpha1",
              "kind": "Vault",
              "metadata": {
                "name": "vault-sample"
              },
              "spec": {
                "global": {
                  "enabled": true,
                  "imagePullSecrets": [],
                  "openshift": false,
                  "psp": {
                    "annotations": "seccomp.security.alpha.kubernetes.io/allowedProfileNames: docker/default,runtime/default\napparmor.security.beta.kubernetes.io/allowedProfileNames: runtime/default\nseccomp.security.alpha.kubernetes.io/defaultProfileName:  runtime/default\napparmor.security.beta.kubernetes.io/defaultProfileName:  runtime/default\n",
                    "enable": false
                  },
                  "tlsDisable": true
                },
                "injector": {
                  "affinity": null,
                  "agentImage": {
                    "repository": "vault",
                    "tag": "1.5.4"
                  },
                  "annotations": {},
                  "authPath": "auth/kubernetes",
                  "certs": {
                    "caBundle": "",
                    "certName": "tls.crt",
                    "keyName": "tls.key",
                    "secretName": null
                  },
                  "enabled": true,
                  "externalVaultAddr": "",
                  "extraEnvironmentVars": {},
                  "image": {
                    "pullPolicy": "IfNotPresent",
                    "repository": "hashicorp/vault-k8s",
                    "tag": "0.6.0"
                  },
                  "logFormat": "standard",
                  "logLevel": "info",
                  "metrics": {
                    "enabled": false
                  },
                  "namespaceSelector": {},
                  "nodeSelector": null,
                  "priorityClassName": "",
                  "resources": {},
                  "revokeOnShutdown": false,
                  "tolerations": null
                },
                "server": {
                  "affinity": "podAntiAffinity:\n  requiredDuringSchedulingIgnoredDuringExecution:\n    - labelSelector:\n        matchLabels:\n          app.kubernetes.io/name: {{ template \"vault.name\" . }}\n          app.kubernetes.io/instance: \"{{ .Release.Name }}\"\n          component: server\n      topologyKey: kubernetes.io/hostname\n",
                  "annotations": {},
                  "auditStorage": {
                    "accessMode": "ReadWriteOnce",
                    "annotations": {},
                    "enabled": false,
                    "mountPath": "/vault/audit",
                    "size": "10Gi",
                    "storageClass": null
                  },
                  "authDelegator": {
                    "enabled": true
                  },
                  "dataStorage": {
                    "accessMode": "ReadWriteOnce",
                    "annotations": {},
                    "enabled": true,
                    "mountPath": "/vault/data",
                    "size": "10Gi",
                    "storageClass": null
                  },
                  "dev": {
                    "enabled": false
                  },
                  "extraArgs": "",
                  "extraContainers": null,
                  "extraEnvironmentVars": {},
                  "extraInitContainers": null,
                  "extraLabels": {},
                  "extraSecretEnvironmentVars": [],
                  "extraVolumes": [],
                  "ha": {
                    "apiAddr": null,
                    "config": "ui = true\n\nlistener \"tcp\" {\n  tls_disable = 1\n  address = \"[::]:8200\"\n  cluster_address = \"[::]:8201\"\n}\nstorage \"consul\" {\n  path = \"vault\"\n  address = \"HOST_IP:8500\"\n}\n\nservice_registration \"kubernetes\" {}\n\n# Example configuration for using auto-unseal, using Google Cloud KMS. The\n# GKMS keys must already exist, and the cluster must have a service account\n# that is authorized to access GCP KMS.\n#seal \"gcpckms\" {\n#   project     = \"vault-helm-dev-246514\"\n#   region      = \"global\"\n#   key_ring    = \"vault-helm-unseal-kr\"\n#   crypto_key  = \"vault-helm-unseal-key\"\n#}\n",
                    "disruptionBudget": {
                      "enabled": true,
                      "maxUnavailable": null
                    },
                    "enabled": false,
                    "raft": {
                      "config": "ui = true\n\nlistener \"tcp\" {\n  tls_disable = 1\n  address = \"[::]:8200\"\n  cluster_address = \"[::]:8201\"\n}\n\nstorage \"raft\" {\n  path = \"/vault/data\"\n}\n\nservice_registration \"kubernetes\" {}\n",
                      "enabled": false,
                      "setNodeId": false
                    },
                    "replicas": 3
                  },
                  "image": {
                    "pullPolicy": "IfNotPresent",
                    "repository": "vault",
                    "tag": "1.5.4"
                  },
                  "ingress": {
                    "annotations": {},
                    "enabled": false,
                    "hosts": [
                      {
                        "host": "chart-example.local",
                        "paths": []
                      }
                    ],
                    "labels": {},
                    "tls": []
                  },
                  "livenessProbe": {
                    "enabled": false,
                    "failureThreshold": 2,
                    "initialDelaySeconds": 60,
                    "path": "/v1/sys/health?standbyok=true",
                    "periodSeconds": 5,
                    "successThreshold": 1,
                    "timeoutSeconds": 3
                  },
                  "networkPolicy": {
                    "enabled": false
                  },
                  "nodeSelector": null,
                  "postStart": [],
                  "preStopSleepSeconds": 5,
                  "priorityClassName": "",
                  "readinessProbe": {
                    "enabled": true,
                    "failureThreshold": 2,
                    "initialDelaySeconds": 5,
                    "periodSeconds": 5,
                    "successThreshold": 1,
                    "timeoutSeconds": 3
                  },
                  "resources": {},
                  "route": {
                    "annotations": {},
                    "enabled": false,
                    "host": "chart-example.local",
                    "labels": {}
                  },
                  "service": {
                    "annotations": {},
                    "enabled": true,
                    "port": 8200,
                    "targetPort": 8200
                  },
                  "serviceAccount": {
                    "annotations": {},
                    "create": true,
                    "name": ""
                  },
                  "shareProcessNamespace": false,
                  "standalone": {
                    "config": "ui = true\n\nlistener \"tcp\" {\n  tls_disable = 1\n  address = \"[::]:8200\"\n  cluster_address = \"[::]:8201\"\n}\nstorage \"file\" {\n  path = \"/vault/data\"\n}\n\n# Example configuration for using auto-unseal, using Google Cloud KMS. The\n# GKMS keys must already exist, and the cluster must have a service account\n# that is authorized to access GCP KMS.\n#seal \"gcpckms\" {\n#   project     = \"vault-helm-dev\"\n#   region      = \"global\"\n#   key_ring    = \"vault-helm-unseal-kr\"\n#   crypto_key  = \"vault-helm-unseal-key\"\n#}\n",
                    "enabled": "-"
                  },
                  "statefulSet": {
                    "annotations": {}
                  },
                  "tolerations": null,
                  "updateStrategyType": "OnDelete",
                  "volumeMounts": null,
                  "volumes": null
                },
                "ui": {
                  "activeVaultPodOnly": false,
                  "annotations": {},
                  "enabled": false,
                  "externalPort": 8200,
                  "publishNotReadyAddresses": true,
                  "serviceNodePort": null,
                  "serviceType": "ClusterIP"
                }
              }
            }
          ]
        capabilities: Basic Install
        categories: Security
        containerImage: quay.io/brejohns/vault-helm:0.0.2
        createdAt: "2021-01-27 09:00:00"
        description: Use Helm to Deploy and manage Hashicorp Vault
        operatorhub.io/ui-metadata-max-k8s-version: "1.21"
        operators.operatorframework.io/builder: operator-sdk-v1.2.0
        operators.operatorframework.io/project_layout: helm.sdk.operatorframework.io/v1
        repository: https://github.com/SDBrett/vault-helm
      apiservicedefinitions: {}
      customresourcedefinitions:
        owned:
        - description: Provides Vault-Helm operators with values for the Vault Helm
            chart
          displayName: Vault Helm
          kind: Vault
          name: vaults.vault.sdbrett.com
          version: v1alpha1
      description: Operator for deployment and management of Hashicorp Vault instances
        based on the Helm chart
      displayName: Vault Helm
      installModes:
      - supported: true
        type: OwnNamespace
      - supported: false
        type: SingleNamespace
      - supported: false
        type: MultiNamespace
      - supported: true
        type: AllNamespaces
      keywords:
      - Helm
      - Vault
      - Hashicorp
      maintainers:
      - email: brett@sdbrett.com
        name: Brett Johnson
      maturity: alpha
      provider:
        name: SDBrett
        url: sdbrett.com
      relatedImages:
      - gcr.io/kubebuilder/kube-rbac-proxy:v0.5.0
      - quay.io/brejohns/vault-helm:0.0.2
      version: 0.0.2
    name: alpha
  defaultChannel: alpha
  packageName: vault-helm
  provider:
    name: SDBrett
    url: sdbrett.com
