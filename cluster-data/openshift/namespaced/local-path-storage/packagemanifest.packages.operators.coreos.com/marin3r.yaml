apiVersion: packages.operators.coreos.com/v1
kind: PackageManifest
metadata:
  creationTimestamp: "2022-10-03T18:25:13Z"
  labels:
    catalog: operatorhubio-catalog
    catalog-namespace: olm
    operatorframework.io/arch.amd64: supported
    operatorframework.io/os.linux: supported
    provider: Red Hat
    provider-url: ""
  name: marin3r
  namespace: local-path-storage
spec: {}
status:
  catalogSource: operatorhubio-catalog
  catalogSourceDisplayName: Community Operators
  catalogSourceNamespace: olm
  catalogSourcePublisher: OperatorHub.io
  channels:
  - currentCSV: marin3r.v0.10.0
    currentCSVDesc:
      annotations:
        alm-examples: |-
          [
            {
              "apiVersion": "marin3r.3scale.net/v1alpha1",
              "kind": "EnvoyConfig",
              "metadata": {
                "name": "envoyconfig-example",
                "namespace": "my-namespace"
              },
              "spec": {
                "envoyAPI": "v3",
                "envoyResources": {
                  "clusters": [
                    {
                      "name": "example",
                      "value": "name: example\nconnect_timeout: 10ms\ntype: STRICT_DNS\ndns_lookup_family: V4_ONLY\nlb_policy: ROUND_ROBIN\nload_assignment:\n  cluster_name: example\n  endpoints:\n    - lb_endpoints:\n        - endpoint:\n            address:\n              socket_address:\n                address: example\n                port_value: 8080\n"
                    }
                  ],
                  "listeners": [
                    {
                      "name": "https",
                      "value": "name: https\naddress:\n  socket_address:\n    address: 0.0.0.0\n    port_value: 8443\nfilter_chains:\n  - filters:\n    - name: envoy.filters.network.http_connection_manager\n      typed_config:\n        \"@type\": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\n        access_log:\n          - name: envoy.access_loggers.file\n            typed_config:\n              \"@type\": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog\n              path: /dev/stdout\n        stat_prefix: https\n        rds: { route_config_name: \"local\", config_source: { ads: {}, resource_api_version: \"V3\" }}\n        http_filters:\n          - name: envoy.filters.http.router\n    transport_socket:\n      name: envoy.transport_sockets.tls\n      typed_config:\n        \"@type\": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext\n        common_tls_context:\n          tls_certificate_sds_secret_configs:\n            - name: example.default.svc\n              sds_config: { ads: {}, resource_api_version: \"V3\" }\n"
                    }
                  ],
                  "routes": [
                    {
                      "name": "local",
                      "value": "name: local\nvirtual_hosts:\n  - name: all\n    domains: [\"*\"]\n    routes:\n      - match:\n          prefix: \"/\"\n        route:\n          cluster: example\n"
                    }
                  ],
                  "secrets": [
                    {
                      "name": "example.default.svc"
                    }
                  ]
                },
                "nodeID": "example",
                "serialization": "yaml"
              }
            },
            {
              "apiVersion": "operator.marin3r.3scale.net/v1alpha1",
              "kind": "DiscoveryService",
              "metadata": {
                "name": "discoveryservice-example",
                "namespace": "my-namespace"
              },
              "spec": {}
            },
            {
              "apiVersion": "operator.marin3r.3scale.net/v1alpha1",
              "kind": "EnvoyDeployment",
              "metadata": {
                "name": "envoydeployment-sample",
                "namespace": "my-namespace"
              },
              "spec": {
                "discoveryServiceRef": "discoveryservice-example",
                "envoyConfigRef": "envoyconfig-example",
                "ports": [
                  {
                    "name": "https",
                    "port": 8443
                  }
                ]
              }
            }
          ]
        capabilities: Full Lifecycle
        categories: Networking
        certified: "false"
        containerImage: quay.io/3scale/marin3r
        description: Lighweight, CRD based Envoy control plane for Kubernetes
        operators.operatorframework.io/builder: operator-sdk-v1.14.0+git
        operators.operatorframework.io/internal-objects: '["envoyconfigrevisions.marin3r.3scale.net","discoveryservicecertificates.operator.marin3r.3scale.net"]'
        operators.operatorframework.io/project_layout: go.kubebuilder.io/v3
        repository: https://github.com/3scale-ops/marin3r
        support: Red Hat, Inc.
      apiservicedefinitions: {}
      customresourcedefinitions:
        owned:
        - description: DiscoveryServiceCertificate is an internal resource used to
            create certificates. This resource is used by the DiscoveryService controller
            to create the required certificates for the different components. Direct
            use of DiscoveryServiceCertificate objects is discouraged.
          displayName: DiscoveryServiceCertificate
          kind: DiscoveryServiceCertificate
          name: discoveryservicecertificates.operator.marin3r.3scale.net
          version: v1alpha1
        - description: DiscoveryService represents an envoy discovery service server.
            Only one instance per namespace is currently supported.
          displayName: DiscoveryService
          kind: DiscoveryService
          name: discoveryservices.operator.marin3r.3scale.net
          version: v1alpha1
        - description: EnvoyConfigRevision is an internal resource that stores a specific
            version of an EnvoyConfig resource. EnvoyConfigRevisions are automatically
            created and deleted by the EnvoyConfig controller and are not intended
            to be directly used. Use EnvoyConfig objects instead.
          displayName: EnvoyConfigRevision
          kind: EnvoyConfigRevision
          name: envoyconfigrevisions.marin3r.3scale.net
          version: v1alpha1
        - description: EnvoyConfig holds the configuration for a given envoy nodeID.
            The spec of an EnvoyConfig object holds the Envoy resources that conform
            the desired configuration for the given nodeID and that the discovery
            service will send to any envoy client that identifies itself with that
            nodeID.
          displayName: EnvoyConfig
          kind: EnvoyConfig
          name: envoyconfigs.marin3r.3scale.net
          version: v1alpha1
        - description: EnvoyDeployment is a resource to deploy and manage a Kubernetes
            Deployment of Envoy Pods.
          displayName: EnvoyDeployment
          kind: EnvoyDeployment
          name: envoydeployments.operator.marin3r.3scale.net
          version: v1alpha1
      description: |
        MARIN3R implements a control plane to deploy, configure and operate a fleet of envoy instances within a Kubernetes cluster.
        It operates a group of gateways and Pod sidecar containers to provide general purpose functionality required to operate production systems.

        Features:

        * Deploy and manage an Envoy xDS server using the DiscoveryService custom resource.
        * Inject Envoy sidecar containers based on Pod annotations.
        * Deploy Envoy as a Kubernetes Deployment using the EnvoyDeployment custom resource.
        * Dynamic Envoy configuration and re-configuration using the EnvoyConfig custom resource.
        * Use Kubernetes Secrets as certificate sources.
        * Syntactic validation of Envoy configurations.
        * Lifecycle management of Envoy containers (graceful shutdown and connection draining).
        * Self-healing.

        Check the [docs](https://github.com/3scale-ops/marin3r#readme) for more information.

        ## License
        MARIN3R is licensed under the [Apache 2.0 license](https://github.com/3scale/prometheus-exporter-operator/blob/master/LICENSE)
      displayName: MARIN3R
      installModes:
      - supported: true
        type: OwnNamespace
      - supported: true
        type: SingleNamespace
      - supported: true
        type: MultiNamespace
      - supported: true
        type: AllNamespaces
      keywords:
      - envoy
      - discovery
      - controlplane
      - proxy
      - sidecar
      - xds
      - network
      - gateway
      links:
      - name: GitHub
        url: https://github.com/3scale-ops/marin3r
      maintainers:
      - email: 3scale-operations+marin3r@redhat.com
        name: 3scale Operations Team
      maturity: alpha
      provider:
        name: Red Hat
      relatedImages:
      - quay.io/3scale/marin3r:v0.10.0
      version: 0.10.0
    name: alpha
  - currentCSV: marin3r.v0.10.0
    currentCSVDesc:
      annotations:
        alm-examples: |-
          [
            {
              "apiVersion": "marin3r.3scale.net/v1alpha1",
              "kind": "EnvoyConfig",
              "metadata": {
                "name": "envoyconfig-example",
                "namespace": "my-namespace"
              },
              "spec": {
                "envoyAPI": "v3",
                "envoyResources": {
                  "clusters": [
                    {
                      "name": "example",
                      "value": "name: example\nconnect_timeout: 10ms\ntype: STRICT_DNS\ndns_lookup_family: V4_ONLY\nlb_policy: ROUND_ROBIN\nload_assignment:\n  cluster_name: example\n  endpoints:\n    - lb_endpoints:\n        - endpoint:\n            address:\n              socket_address:\n                address: example\n                port_value: 8080\n"
                    }
                  ],
                  "listeners": [
                    {
                      "name": "https",
                      "value": "name: https\naddress:\n  socket_address:\n    address: 0.0.0.0\n    port_value: 8443\nfilter_chains:\n  - filters:\n    - name: envoy.filters.network.http_connection_manager\n      typed_config:\n        \"@type\": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\n        access_log:\n          - name: envoy.access_loggers.file\n            typed_config:\n              \"@type\": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog\n              path: /dev/stdout\n        stat_prefix: https\n        rds: { route_config_name: \"local\", config_source: { ads: {}, resource_api_version: \"V3\" }}\n        http_filters:\n          - name: envoy.filters.http.router\n    transport_socket:\n      name: envoy.transport_sockets.tls\n      typed_config:\n        \"@type\": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext\n        common_tls_context:\n          tls_certificate_sds_secret_configs:\n            - name: example.default.svc\n              sds_config: { ads: {}, resource_api_version: \"V3\" }\n"
                    }
                  ],
                  "routes": [
                    {
                      "name": "local",
                      "value": "name: local\nvirtual_hosts:\n  - name: all\n    domains: [\"*\"]\n    routes:\n      - match:\n          prefix: \"/\"\n        route:\n          cluster: example\n"
                    }
                  ],
                  "secrets": [
                    {
                      "name": "example.default.svc"
                    }
                  ]
                },
                "nodeID": "example",
                "serialization": "yaml"
              }
            },
            {
              "apiVersion": "operator.marin3r.3scale.net/v1alpha1",
              "kind": "DiscoveryService",
              "metadata": {
                "name": "discoveryservice-example",
                "namespace": "my-namespace"
              },
              "spec": {}
            },
            {
              "apiVersion": "operator.marin3r.3scale.net/v1alpha1",
              "kind": "EnvoyDeployment",
              "metadata": {
                "name": "envoydeployment-sample",
                "namespace": "my-namespace"
              },
              "spec": {
                "discoveryServiceRef": "discoveryservice-example",
                "envoyConfigRef": "envoyconfig-example",
                "ports": [
                  {
                    "name": "https",
                    "port": 8443
                  }
                ]
              }
            }
          ]
        capabilities: Full Lifecycle
        categories: Networking
        certified: "false"
        containerImage: quay.io/3scale/marin3r
        description: Lighweight, CRD based Envoy control plane for Kubernetes
        operators.operatorframework.io/builder: operator-sdk-v1.14.0+git
        operators.operatorframework.io/internal-objects: '["envoyconfigrevisions.marin3r.3scale.net","discoveryservicecertificates.operator.marin3r.3scale.net"]'
        operators.operatorframework.io/project_layout: go.kubebuilder.io/v3
        repository: https://github.com/3scale-ops/marin3r
        support: Red Hat, Inc.
      apiservicedefinitions: {}
      customresourcedefinitions:
        owned:
        - description: DiscoveryServiceCertificate is an internal resource used to
            create certificates. This resource is used by the DiscoveryService controller
            to create the required certificates for the different components. Direct
            use of DiscoveryServiceCertificate objects is discouraged.
          displayName: DiscoveryServiceCertificate
          kind: DiscoveryServiceCertificate
          name: discoveryservicecertificates.operator.marin3r.3scale.net
          version: v1alpha1
        - description: DiscoveryService represents an envoy discovery service server.
            Only one instance per namespace is currently supported.
          displayName: DiscoveryService
          kind: DiscoveryService
          name: discoveryservices.operator.marin3r.3scale.net
          version: v1alpha1
        - description: EnvoyConfigRevision is an internal resource that stores a specific
            version of an EnvoyConfig resource. EnvoyConfigRevisions are automatically
            created and deleted by the EnvoyConfig controller and are not intended
            to be directly used. Use EnvoyConfig objects instead.
          displayName: EnvoyConfigRevision
          kind: EnvoyConfigRevision
          name: envoyconfigrevisions.marin3r.3scale.net
          version: v1alpha1
        - description: EnvoyConfig holds the configuration for a given envoy nodeID.
            The spec of an EnvoyConfig object holds the Envoy resources that conform
            the desired configuration for the given nodeID and that the discovery
            service will send to any envoy client that identifies itself with that
            nodeID.
          displayName: EnvoyConfig
          kind: EnvoyConfig
          name: envoyconfigs.marin3r.3scale.net
          version: v1alpha1
        - description: EnvoyDeployment is a resource to deploy and manage a Kubernetes
            Deployment of Envoy Pods.
          displayName: EnvoyDeployment
          kind: EnvoyDeployment
          name: envoydeployments.operator.marin3r.3scale.net
          version: v1alpha1
      description: |
        MARIN3R implements a control plane to deploy, configure and operate a fleet of envoy instances within a Kubernetes cluster.
        It operates a group of gateways and Pod sidecar containers to provide general purpose functionality required to operate production systems.

        Features:

        * Deploy and manage an Envoy xDS server using the DiscoveryService custom resource.
        * Inject Envoy sidecar containers based on Pod annotations.
        * Deploy Envoy as a Kubernetes Deployment using the EnvoyDeployment custom resource.
        * Dynamic Envoy configuration and re-configuration using the EnvoyConfig custom resource.
        * Use Kubernetes Secrets as certificate sources.
        * Syntactic validation of Envoy configurations.
        * Lifecycle management of Envoy containers (graceful shutdown and connection draining).
        * Self-healing.

        Check the [docs](https://github.com/3scale-ops/marin3r#readme) for more information.

        ## License
        MARIN3R is licensed under the [Apache 2.0 license](https://github.com/3scale/prometheus-exporter-operator/blob/master/LICENSE)
      displayName: MARIN3R
      installModes:
      - supported: true
        type: OwnNamespace
      - supported: true
        type: SingleNamespace
      - supported: true
        type: MultiNamespace
      - supported: true
        type: AllNamespaces
      keywords:
      - envoy
      - discovery
      - controlplane
      - proxy
      - sidecar
      - xds
      - network
      - gateway
      links:
      - name: GitHub
        url: https://github.com/3scale-ops/marin3r
      maintainers:
      - email: 3scale-operations+marin3r@redhat.com
        name: 3scale Operations Team
      maturity: alpha
      provider:
        name: Red Hat
      relatedImages:
      - quay.io/3scale/marin3r:v0.10.0
      version: 0.10.0
    name: stable
  defaultChannel: stable
  packageName: marin3r
  provider:
    name: Red Hat
