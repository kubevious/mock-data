apiVersion: packages.operators.coreos.com/v1
kind: PackageManifest
metadata:
  creationTimestamp: "2022-10-03T18:25:13Z"
  labels:
    catalog: operatorhubio-catalog
    catalog-namespace: olm
    operatorframework.io/arch.amd64: supported
    operatorframework.io/os.linux: supported
    provider: Sysdig
    provider-url: ""
  name: falco
  namespace: local-path-storage
spec: {}
status:
  catalogSource: operatorhubio-catalog
  catalogSourceDisplayName: Community Operators
  catalogSourceNamespace: olm
  catalogSourcePublisher: OperatorHub.io
  channels:
  - currentCSV: falco-operator.v0.7.6
    currentCSVDesc:
      annotations:
        alm-examples: |-
          [{
            "apiVersion": "falco.org/v1alpha1",
            "kind": "Falco",
            "metadata": {
              "name": "falco-with-ebpf"
            },
            "spec": {
              "ebpf": {
                "enabled": true
              }
            }
          },
          {
            "apiVersion": "falco.org/v1alpha1",
            "kind": "Falco",
            "metadata": {
              "name": "falco-with-traefik-rules"
            },
            "spec": {
              "customRules": {
                "rules-traefik.yaml": "- macro: traefik_consider_syscalls\n  condition: (evt.num < 0)\n\n- macro: app_traefik\n  condition: container and container.image startswith \"traefik\"\n\n# Restricting listening ports to selected set\n\n- list: traefik_allowed_inbound_ports_tcp\n  items: [443, 80, 8080]\n\n- rule: Unexpected inbound tcp connection traefik\n  desc: Detect inbound traffic to traefik using tcp on a port outside of expected set\n  condition: inbound and evt.rawres >= 0 and not fd.sport in (traefik_allowed_inbound_ports_tcp) and app_traefik\n  output: Inbound network connection to traefik on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting spawned processes to selected set\n\n- list: traefik_allowed_processes\n  items: [\"traefik\"]\n\n- rule: Unexpected spawned process traefik\n  desc: Detect a process started in a traefik container outside of an expected set\n  condition: spawned_process and not proc.name in (traefik_allowed_processes) and app_traefik\n  output: Unexpected process spawned in traefik container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)\n  priority: NOTICE"
              }
            }
          }]
        capabilities: Basic Install
        categories: Security
        certified: "false"
        containerImage: docker.io/falcosecurity/falco-operator-helm:0.7.6
        createdAt: "2019-03-12T18:30:00Z"
        description: Falco is a behavioral activity monitor designed to detect anomalous
          activity in your applications. You can use Falco to monitor run-time security
          of your Kubernetes applications and internal components.
        operatorhub.io/ui-metadata-max-k8s-version: "1.21"
        repository: https://github.com/falcosecurity/falco-operator/tree/helm-based-operator
        support: Sysdig, Inc.
      apiservicedefinitions: {}
      customresourcedefinitions:
        owned:
        - description: Represents a Falco running on each node of your cluster.
          displayName: Falco daemonSet
          kind: Falco
          name: falcos.falco.org
          version: v1alpha1
      description: |-
        [Falco](https://falco.org) is a behavioral activity monitor designed to detect anomalous activity in your applications. You can use Falco to monitor run-time security of your Kubernetes applications and internal components.

        To know more about Falco have a look at:

        - [Kubernetes security logging with Falco & Fluentd](https://sysdig.com/blog/kubernetes-security-logging-fluentd-falco/)
        - [Active Kubernetes security with Sysdig Falco, NATS, and kubeless](https://sysdig.com/blog/active-kubernetes-security-falco-nats-kubeless/)
        - [Detecting cryptojacking with Sysdigâ€™s Falco](https://sysdig.com/blog/detecting-cryptojacking-with-sysdigs-falco/)

        This operator adds Falco to all nodes in your cluster using a DaemonSet. It
        also provides a Deployment for generating Falco alerts. This is useful for
        testing purposes.

        ## Settings

        This operator, uses the same options than the
        [Helm Chart](https://hub.helm.sh/charts/stable/falco), please take a look to
        all the options in the following table:

        | Parameter                                       | Description                                                          | Default                                                                                |
        | ---                                             | ---                                                                  | ---                                                                                    |
        | `image.repository`                              | The image repository to pull from                                    | `falcosecurity/falco`                                                                  |
        | `image.tag`                                     | The image tag to pull                                                | `0.15.0`                                                                               |
        | `image.pullPolicy`                              | The image pull policy                                                | `IfNotPresent`                                                                         |
        | `resources`                                     | Specify container resources                                          | `{}`                                                                                   |
        | `extraArgs`                                     | Specify additional container args                                    | `[]`                                                                                   |
        | `rbac.create`                                   | If true, create & use RBAC resources                                 | `true`                                                                                 |
        | `serviceAccount.create`                         | Create serviceAccount                                                | `true`                                                                                 |
        | `serviceAccount.name`                           | Use this value as serviceAccountName                                 | ` `                                                                                    |
        | `fakeEventGenerator.enabled`                    | Run falco-event-generator for sample events                          | `false`                                                                                |
        | `fakeEventGenerator.replicas`                   | How many replicas of falco-event-generator to run                    | `1`                                                                                    |
        | `proxy.httpProxy`                               | Set the Proxy server if is behind a firewall                         | ``                                                                                     |
        | `proxy.httpsProxy`                              | Set the Proxy server if is behind a firewall                         | ``                                                                                     |
        | `proxy.noProxy`                                 | Set the Proxy server if is behind a firewall                         | ``                                                                                     |
        | `ebpf.enabled`                                  | Enable eBPF support for Falco instead of `falco-probe` kernel module | `false`                                                                                |
        | `ebpf.settings.hostNetwork`                     | Needed to enable eBPF JIT at runtime for performance reasons         | `true`                                                                                 |
        | `ebpf.settings.mountEtcVolume`                  | Needed to detect which kernel version are running in Google COS      | `true`                                                                                 |
        | `falco.rulesFile`                               | The location of the rules files                                      | `[/etc/falco/falco_rules.yaml, /etc/falco/falco_rules.local.yaml, /etc/falco/rules.d]` |
        | `falco.jsonOutput`                              | Output events in json or text                                        | `false`                                                                                |
        | `falco.jsonIncludeOutputProperty`               | Include output property in json output                               | `true`                                                                                 |
        | `falco.logStderr`                               | Send Falco debugging information logs to stderr                      | `true`                                                                                 |
        | `falco.logSyslog`                               | Send Falco debugging information logs to syslog                      | `true`                                                                                 |
        | `falco.logLevel`                                | The minimum level of Falco debugging information to include in logs  | `info`                                                                                 |
        | `falco.priority`                                | The minimum rule priority level to load and run                      | `debug`                                                                                |
        | `falco.bufferedOutputs`                         | Use buffered outputs to channels                                     | `false`                                                                                |
        | `falco.outputs.rate`                            | Number of tokens gained per second                                   | `1`                                                                                    |
        | `falco.outputs.maxBurst`                        | Maximum number of tokens outstanding                                 | `1000`                                                                                 |
        | `falco.syslogOutput.enabled`                    | Enable syslog output for security notifications                      | `true`                                                                                 |
        | `falco.fileOutput.enabled`                      | Enable file output for security notifications                        | `false`                                                                                |
        | `falco.fileOutput.keepAlive`                    | Open file once or every time a new notification arrives              | `false`                                                                                |
        | `falco.fileOutput.filename`                     | The filename for logging notifications                               | `./events.txt`                                                                         |
        | `falco.stdoutOutput.enabled`                    | Enable stdout output for security notifications                      | `true`                                                                                 |
        | `falco.programOutput.enabled`                   | Enable program output for security notifications                     | `false`                                                                                |
        | `falco.programOutput.keepAlive`                 | Start the program once or re-spawn when a notification arrives       | `false`                                                                                |
        | `falco.programOutput.program`                   | Command to execute for program output                                | `mail -s "Falco Notification" someone@example.com`                                     |
        | `customRules`                                   | Third party rules enabled for Falco                                  | `{}`                                                                                   |
        | `integrations.gcscc.enabled`                    | Enable Google Cloud Security Command Center integration              | `false`                                                                                |
        | `integrations.gcscc.webhookUrl`                 | The URL where sysdig-gcscc-connector webhook is listening            | `http://sysdig-gcscc-connector.default.svc.cluster.local:8080/events`                  |
        | `integrations.gcscc.webhookAuthenticationToken` | Token used for authentication and webhook                            | `b27511f86e911f20b9e0f9c8104b4ec4`                                                     |
        | `integrations.natsOutput.enabled`               | Enable NATS Output integration                                       | `false`                                                                                |
        | `integrations.natsOutput.natsUrl`               | The NATS' URL where Falco is going to publish security alerts        | `nats://nats.nats-io.svc.cluster.local:4222`                                           |
        | `integrations.snsOutput.enabled`                | Enable Amazon SNS Output integration                                 | `false`                                                                                |
        | `integrations.snsOutput.topic`                  | The SNS topic where Falco is going to publish security alerts        | ` `                                                                                    |
        | `integrations.snsOutput.aws_access_key_id`      | The AWS Access Key Id credentials for access to SNS n                | ` `                                                                                    |
        | `integrations.snsOutput.aws_secret_access_key`  | The AWS Secret Access Key credential to access to SNS                | ` `                                                                                    |
        | `integrations.snsOutput.aws_default_region`     | The AWS region where SNS is deployed                                 | ` `                                                                                    |
        | `tolerations`                                   | The tolerations for scheduling                                       | `node-role.kubernetes.io/master:NoSchedule`                                            |


        For example, if you want to deploy a DaemonSet with eBPF enabled:

        ```yaml
        apiVersion: falco.org/v1alpha1
        kind: Falco
        metadata:
          name: falco-with-ebpf
        spec:
          ebpf:
            enabled: true
        ```

        And you can apply this file with `kubectl apply -f`
      displayName: Falco Operator
      installModes:
      - supported: true
        type: OwnNamespace
      - supported: true
        type: SingleNamespace
      - supported: false
        type: MultiNamespace
      - supported: false
        type: AllNamespaces
      keywords:
      - monitoring
      - security
      - alerting
      - metric
      - troubleshooting
      - run-time
      links:
      - name: Falco
        url: https://falco.org
      - name: Helm Chart
        url: https://hub.helm.sh/charts/stable/falco
      - name: Sysdig Operator
        url: https://github.com/falcosecurity/falco-operator/tree/helm-based-operator
      - name: Configuration Options
        url: https://github.com/helm/charts/tree/master/stable/falco#configuration
      maintainers:
      - email: nestor.salceda@sysdig.com
        name: NÃ©stor Salceda
      provider:
        name: Sysdig
      relatedImages:
      - docker.io/falcosecurity/falco-operator-helm:0.7.6
      version: 0.7.6
    name: stable
  defaultChannel: stable
  packageName: falco
  provider:
    name: Sysdig
