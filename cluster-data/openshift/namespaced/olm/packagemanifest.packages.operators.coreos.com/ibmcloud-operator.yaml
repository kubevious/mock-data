apiVersion: packages.operators.coreos.com/v1
kind: PackageManifest
metadata:
  creationTimestamp: "2022-10-03T18:25:13Z"
  labels:
    catalog: operatorhubio-catalog
    catalog-namespace: olm
    operatorframework.io/arch.amd64: supported
    operatorframework.io/os.linux: supported
    provider: IBM
    provider-url: ""
  name: ibmcloud-operator
  namespace: olm
spec: {}
status:
  catalogSource: operatorhubio-catalog
  catalogSourceDisplayName: Community Operators
  catalogSourceNamespace: olm
  catalogSourcePublisher: OperatorHub.io
  channels:
  - currentCSV: ibmcloud-operator.v1.1.0
    currentCSVDesc:
      annotations:
        alm-examples: '[{"apiVersion":"ibmcloud.ibm.com/v1","kind":"Service","metadata":{"annotations":{"ibmcloud.ibm.com/self-healing":"enabled"},"name":"mytranslator"},"spec":{"plan":"lite","serviceClass":"language-translator"}},{"apiVersion":"ibmcloud.ibm.com/v1","kind":"Binding","metadata":{"name":"binding-translator"},"spec":{"parameters":[{"name":"serviceid_crn","value":"crn:v1:bluemix:public:iam-identity::a/ACCOUNT_ID::serviceid:SERVICE_ID"}],"secretName":"translator-secret","serviceName":"mytranslator"}}]'
        capabilities: Basic Install
        categories: Cloud Provider
        certified: "false"
        containerImage: cloudoperators/ibmcloud-operator:1.1.0
        createdAt: "2022-03-17T04:17:40Z"
        description: The IBM Cloud Operator provides a Kubernetes CRD-Based API to
          manage the lifecycle of IBM public cloud services.
        repository: https://github.com/IBM/cloud-operators
        support: IBM
      apiservicedefinitions: {}
      customresourcedefinitions:
        owned:
        - description: Binding is an instance of a service binding resource on IBM
            Cloud. A Binding creates a secret with the service instance credentials.
          displayName: Binding
          kind: Binding
          name: bindings.ibmcloud.ibm.com
          version: v1
        - description: Service is an instance of a Service resource on IBM Cloud.
          displayName: Service
          kind: Service
          name: services.ibmcloud.ibm.com
          version: v1
      description: |-
        With the IBM Cloud Operator, you can provision and bind [IBM public cloud services](https://cloud.ibm.com/catalog#services) to your Kubernetes cluster in a Kubernetes-native way. The IBM Cloud Operator is based on the [Kubernetes custom resource definition (CRD) API](https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/) so that your applications can create, update, and delete IBM Cloud services from within the cluster by calling Kubnernetes APIs, instead of needing to use several IBM Cloud APIs in addition to configuring your app for Kubernetes.


        ## Features

        * **Service provisioning**: Create any service with any plan that is available in the [IBM Cloud catalog](https://cloud.ibm.com/catalog#services).

        * **Bindings management**: Automatically create Kubernetes secrets in your Kubernetes cluster with the credentials to bind to any provisioned service to the cluster.


        ## Upgrading the operator


        To upgrade an OperatorHub installation, use the OpenShift web console to perform the upgrade. If upgrading from the `alpha` channel subscription to `stable`, follow the additional upgrade instructions below.

        ### Upgrading to version v0.3 or v1.0
        **IMPORTANT NOTICE:** v0.1 and v0.2 used a different naming scheme for secrets and configmaps. Before you update the IBM Cloud Operator, create secret and configmap resources with these names and copy the contents of your previous resources to the new resources. Then, the upgraded operator recognizes and continues to update the resources.

        Existing `Service` and `Binding` resources **do not** need modification for the upgrade.

        | Previous names (v0.1 and v0.2)         | **Current names (v0.3 and v1.0)**             | Description                                                                           |
        |:---------------------------------------|:--------------------------------------------|:--------------------------------------------------------------------------------------|
        | secret-ibm-cloud-operator              | **ibmcloud-operator-secret**                | Secret with the API key, scoped to the namespace.                                     |
        | config-ibm-cloud-operator              | **ibmcloud-operator-defaults**              | ConfigMap with the default values for new resources.                                  |
        | ibm-cloud-operator                     | **ibmcloud-operator-config**                | ConfigMap with the management namespace configuration.                                |
        | ${namespace}-secret-ibm-cloud-operator | **${namespace}-ibmcloud-operator-secret**   | Management namespace Secret with the API key for ${namespace}.                        |
        | ${namespace}-config-ibm-cloud-operator | **${namespace}-ibmcloud-operator-defaults** | Management namespace ConfigMap with default values for new resources in ${namespace}. |

        **Tip:** Forgot to update the secret and configmap names before upgrading? The operator will not take action on Service and Binding resources until the new secrets and configmaps have been created. Creating these after the upgrade will also work.


        ### OperatorHub stable channel
        Continuous updates and bug fixes are provided in the latest stable channel. Subscribing to the `stable` channel in OperatorHub means you automatically get the latest updates without breaking backward compatibility.

        ### Changelog

        For a list of recent changes, see the [releases page](https://github.com/IBM/cloud-operators/releases).


        ## Prerequisites

        1.  Have an [IBM Cloud account](https://cloud.ibm.com/registration).
        2.  Have a cluster that runs Kubernetes version 1.11 or later (OpenShift 3.11 or later).
        3.  Install the required command line tools.
            *   [IBM Cloud CLI](https://cloud.ibm.com/docs/cli?topic=cloud-cli-getting-started) (`ibmcloud`)
            *   [Kubernetes CLI](https://kubernetes.io/docs/tasks/tools/install-kubectl/) (`kubectl`)
        4.  Log in to your IBM Cloud account from the CLI.

            ```bash
            ibmcloud login
            ```

        5.  Target the appropriate resource group (`-g`) and default region (`-r`) for provisioning services:

            ```bash
            ibmcloud target -g default -r us-south
            ```

        6.  If you also want to provision Cloud Foundry services, target the appropriate `org` and `space` (`--cf`).

            ```bash
            ibmcloud target --cf
            ```

        7.  Set the Kubernetes context of your CLI to your cluster so that you can run `kubectl` commands. For example, if your cluster runs OpenShift, use the `oc login` command.


        ## Setting up the operator

        You can use an installation script to set up the IBM Cloud Operator.
        By default, the installation script stores an API key in a Kubernetes secret in your cluster that can be accessed by the IBM Cloud Operator.
        Next, the script sets default values that are used to provision IBM Cloud services, like the resource group and region to provision the services in. Later, you can override any default value in the `Service` custom resource. Finally, the script deploys the operator in your cluster.

        To use your own API key, set the `IBMCLOUD_API_KEY` environment variable to the key before running the installation script:

            export IBMCLOUD_API_KEY="CUSTOM_API_KEY"

        If installed with Operator Hub, the operator will run in the `openshift-operators` namespace. Otherwise, it will run in the `ibmcloud-operator-system` namespace.

        Prefer to create the secrets and defaults yourself? See the [IBM Cloud Operator installation guide](https://github.com/IBM/cloud-operators/blob/master/docs/install.md).

        ### Using a service ID

        By default, the installation script creates an IBM Cloud API key that impersonates your user credentials, to use to set up the IBM Cloud Operator. However, you might want to create a service ID in IBM Cloud Identity and Access Managment (IAM). By using a service ID, you can control access for the IBM Cloud Operator without having the permissions tied to a particular user, such as if that user leaves the company. For more information, see the [IBM Cloud docs](https://cloud.ibm.com/docs/account?topic=account-serviceids).

        1.  Create a service ID in IBM Cloud IAM. If possible, do not use spaces in the names for your IAM credentials. When you use the operator binding feature, any spaces are replaced with underscores.

            ```bash
            ibmcloud iam service-id-create serviceid-ico -d service-ID-for-ibm-cloud-operator
            ```

        2.  Assign the service ID access to the required permissions to work with the IBM Cloud services that you want the operator to manage. The required permissions vary with each IBM Cloud service. You can also scope an access policy to different regions or resource groups. For example, the following command grants the service ID the **Administrator** platform role in the default resource group in the US South (Dallas) region. For more information, see the [IBM Cloud docs](https://cloud.ibm.com/docs/account?topic=account-userroles).

            ```bash
            ibmcloud iam service-policy-create serviceid-ico --roles Administrator --resource-group-name default --region us-south
            ```

        3.  Create an API key for the service ID.

            ```bash
            ibmcloud iam service-api-key-create apikey-ico serviceid-ico -d api-key-for-ibm-cloud-operator
            ```

        4.  Set the API key of the service ID as your CLI environment variable. Now, when you run the installation script, the script uses the service ID's API key. The following command is an example for macOS.

            ```bash
            export IBMCLOUD_API_KEY=<apikey-ico-value>
            ```

        5.  Confirm that the API key environment variable is set in your CLI.

            ```bash
            echo $IBMCLOUD_API_KEY
            ```

        6.  Follow the [prerequisite steps](https://github.com/IBM/cloud-operators/blob/master/README.md#prerequisites) to log in to the IBM Cloud account that owns the service ID.


        ### Installing the operator for OpenShift clusters

        Before you begin, complete the [prerequisite steps](https://github.com/IBM/cloud-operators/blob/master/README.md#prerequisites) to log in to IBM Cloud and your cluster, and optionally set up a [service ID API key](https://github.com/IBM/cloud-operators/blob/master/README.md#using-a-service-id).

        To configure the latest release for OpenShift before installing via the OperatorHub, run the following script:

        *   **Latest release**:

            ```bash
            curl -sL https://raw.githubusercontent.com/IBM/cloud-operators/master/hack/configure-operator.sh | bash
            ```

        *   **Specific release**: Replace `-v 0.0.0` with the specific version that you want to install.

            ```bash
            curl -sL https://raw.githubusercontent.com/IBM/cloud-operators/master/hack/configure-operator.sh | bash -s -- -v 0.0.0 store-creds
            ```


        ## Using the IBM Cloud Operator

        To use the IBM Cloud Operator, create a service instance and then bind the service to your cluster. For more information, see the [sample configuration files](https://github.com/IBM/cloud-operators/blob/master/config/samples), [user guide](https://github.com/IBM/cloud-operators/blob/master/docs/user-guide.md), and [reference documentation](https://github.com/IBM/cloud-operators/blob/master/README.md#reference).

        #### Step 1: Creating a service instance

        1.  To create an instance of an IBM public cloud service, first create a `Service` custom resource file. For more options, see the [Service properties](https://github.com/IBM/cloud-operators/blob/master/README.md#service-properties) reference doc.
            *   `<SERVICE_CLASS>` is the IBM Cloud service that you want to create. To list IBM Cloud services, run `ibmcloud catalog service-marketplace` and use the **Name** value from the output.
            *   `<PLAN>` is the plan for the IBM Cloud service that you want to create, such as `free` or `standard`. To list available plans, run `ibmcloud catalog service <SERVICE_CLASS> | grep plan`.

            ```yaml
            apiVersion: ibmcloud.ibm.com/v1
            kind: Service
            metadata:
                name: myservice
            spec:
                plan: <PLAN>
                serviceClass: <SERVICE_CLASS>
            ```

        2.  Create the service instance in your cluster.

            ```bash
            kubectl apply -f filepath/myservice.yaml
            ```

        3.  Check that your service status is **Online** in your cluster.

            ```bash
            kubectl get services.ibmcloud
            NAME           STATUS   AGE
            myservice      Online   12s
            ```

        4.  Verify that your service instance is created in IBM Cloud.

            ```bash
            ibmcloud resource service-instances | grep myservice
            ```

        #### Step 2: Binding the service instance

        1.  To bind your service to the cluster so that your apps can use the service, create a `Binding` custom resource, where the `serviceName` field is the name of the `Service` custom resource that you previously created. For more options, see [Binding properties](https://github.com/IBM/cloud-operators/blob/master/README.md#binding-properties).

            ```yaml
            apiVersion: ibmcloud.ibm.com/v1
            kind: Binding
            metadata:
                name: mybinding
            spec:
                serviceName: myservice
            ```

        2.  Create the binding in your cluster.

            ```bash
            kubectl apply -f filepath/mybinding.yaml
            ```

        3.  Check that your service status is **Online**.

            ```bash
            kubectl get bindings.ibmcloud
            NAME         STATUS   AGE
            mybinding    Online   25s
            ```

        4.  Check that a secret of the same name as your binding is created. The secret contains the service credentials that apps in your cluster can use to access the service.

            ```bash
            kubectl get secrets
            NAME         TYPE      DATA   AGE
            mybinding    Opaque    6      102s
            ```
      displayName: IBM Cloud Operator
      installModes:
      - supported: true
        type: OwnNamespace
      - supported: false
        type: SingleNamespace
      - supported: false
        type: MultiNamespace
      - supported: true
        type: AllNamespaces
      keywords:
      - IBM
      - Cloud
      links:
      - name: Source on GitHub
        url: https://github.com/ibm/cloud-operators
      maintainers:
      - email: johnstarich@johnstarich.com
        name: John Starich
      - email: mvaziri@us.ibm.com
        name: vazirim
      - email: greg.lanthier@ca.ibm.com
        name: Greg Lanthier
      - email: halacs@users.noreply.github.com
        name: Halacs
      - email: artberger@users.noreply.github.com
        name: Art
      maturity: alpha
      minKubeVersion: 1.16.0
      provider:
        name: IBM
      relatedImages:
      - gcr.io/kubebuilder/kube-rbac-proxy:v0.5.0
      - cloudoperators/ibmcloud-operator:1.1.0
      version: 1.1.0
    name: stable
  defaultChannel: stable
  packageName: ibmcloud-operator
  provider:
    name: IBM
