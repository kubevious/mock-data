apiVersion: packages.operators.coreos.com/v1
kind: PackageManifest
metadata:
  creationTimestamp: "2022-10-03T18:25:13Z"
  labels:
    catalog: operatorhubio-catalog
    catalog-namespace: olm
    operatorframework.io/arch.amd64: supported
    operatorframework.io/os.linux: supported
    provider: Red Hat
    provider-url: https://www.redhat.com
  name: netobserv-operator
  namespace: olm
spec: {}
status:
  catalogSource: operatorhubio-catalog
  catalogSourceDisplayName: Community Operators
  catalogSourceNamespace: olm
  catalogSourcePublisher: OperatorHub.io
  channels:
  - currentCSV: netobserv-operator.v0.1.4
    currentCSVDesc:
      annotations:
        alm-examples: |-
          [
            {
              "apiVersion": "flows.netobserv.io/v1alpha1",
              "kind": "FlowCollector",
              "metadata": {
                "name": "cluster"
              },
              "spec": {
                "agent": "ipfix",
                "clusterNetworkOperator": {
                  "namespace": "openshift-network-operator"
                },
                "consolePlugin": {
                  "image": "quay.io/netobserv/network-observability-console-plugin:v0.1.4",
                  "imagePullPolicy": "IfNotPresent",
                  "logLevel": "info",
                  "port": 9001,
                  "portNaming": {
                    "enable": true,
                    "portNames": {
                      "3100": "loki"
                    }
                  },
                  "register": true
                },
                "ebpf": {
                  "cacheActiveTimeout": "5s",
                  "cacheMaxFlows": 1000,
                  "excludeInterfaces": [
                    "lo"
                  ],
                  "image": "quay.io/netobserv/netobserv-ebpf-agent:v0.1.2",
                  "imagePullPolicy": "IfNotPresent",
                  "interfaces": [],
                  "logLevel": "info",
                  "privileged": false,
                  "sampling": 0
                },
                "flowlogsPipeline": {
                  "dropUnusedFields": true,
                  "enableKubeProbes": true,
                  "healthPort": 8080,
                  "ignoreMetrics": [],
                  "image": "quay.io/netobserv/flowlogs-pipeline:v0.1.3",
                  "imagePullPolicy": "IfNotPresent",
                  "kind": "DaemonSet",
                  "logLevel": "info",
                  "port": 2055,
                  "prometheusPort": 9102
                },
                "ipfix": {
                  "cacheActiveTimeout": "20s",
                  "cacheMaxFlows": 400,
                  "sampling": 400
                },
                "kafka": {
                  "address": "kafka-cluster-kafka-bootstrap.network-observability",
                  "enable": false,
                  "tls": {
                    "caCert": {
                      "certFile": "ca.crt",
                      "name": "kafka-cluster-cluster-ca-cert",
                      "type": "secret"
                    },
                    "enable": false,
                    "userCert": {
                      "certFile": "user.crt",
                      "certKey": "user.key",
                      "name": "flp-kafka",
                      "type": "secret"
                    }
                  },
                  "topic": "network-flows"
                },
                "loki": {
                  "batchSize": 102400,
                  "batchWait": "1s",
                  "maxBackoff": "300s",
                  "maxRetries": 10,
                  "minBackoff": "1s",
                  "staticLabels": {
                    "app": "netobserv-flowcollector"
                  },
                  "tls": {
                    "caCert": {
                      "certFile": "service-ca.crt",
                      "name": "loki",
                      "type": "configmap"
                    },
                    "enable": false
                  },
                  "url": "http://loki.network-observability.svc:3100/"
                },
                "namespace": "network-observability",
                "ovnKubernetes": {
                  "containerName": "ovnkube-node",
                  "daemonSetName": "ovnkube-node",
                  "namespace": "ovn-kubernetes"
                }
              }
            }
          ]
        capabilities: Basic Install
        categories: Monitoring
        console.openshift.io/plugins: '["network-observability-plugin"]'
        containerImage: quay.io/netobserv/network-observability-operator:0.1.4
        createdAt: "2022-08-08T16:02:25Z"
        description: Network flows collector and monitoring solution
        operators.operatorframework.io/builder: operator-sdk-v1.16.0+git
        operators.operatorframework.io/project_layout: go.kubebuilder.io/v3
        repository: https://github.com/netobserv/network-observability-operator
      apiservicedefinitions: {}
      customresourcedefinitions:
        owned:
        - description: FlowCollector is the Schema for the flowcollectors API, which
            pilots and configures netflow collection.
          displayName: Flow Collector
          kind: FlowCollector
          name: flowcollectors.flows.netobserv.io
          version: v1alpha1
      description: |-
        NetObserv Operator is an OpenShift / Kubernetes operator for network observability. It deploys a monitoring pipeline to collect and enrich network flows. These flows can be produced by the NetObserv eBPF agent, or by any device or CNI able to export flows in IPFIX format, such as OVN-Kubernetes.

        The operator provides dashboards, metrics, and keeps flows accessible in a queryable log store, Grafana Loki. When used in OpenShift, new dashboards are available in the Console.

        This is an early release, we would be grateful if you could inform us of any issues.

        ## Dependencies

        - [Loki](https://grafana.com/oss/loki/) is required, it is used as a store for all collected flows.
        For a scalable deployment, please refer to [our distributed Loki guide](https://github.com/netobserv/documents/blob/main/loki_distributed.md) or [Grafana's official documentation](https://grafana.com/docs/loki/latest/).
        For a quick install that is not suitable for production (it deploys a single pod, configures a 1GB storage PVC, with 24 hours of retention), run the following commands:

        ```
        kubectl create namespace network-observability
        kubectl apply -f <(curl -L https://raw.githubusercontent.com/netobserv/documents/be14cbdca9af223f5472fffef05257089bc73c8a/examples/zero-click-loki/1-storage.yaml) -n network-observability
        kubectl apply -f <(curl -L https://raw.githubusercontent.com/netobserv/documents/be14cbdca9af223f5472fffef05257089bc73c8a/examples/zero-click-loki/2-loki.yaml) -n network-observability
        ```

        - [Grafana](https://grafana.com/oss/grafana/) can optionally be installed for custom dashboards and query capabilities.

        ## Configuration

        The `FlowCollector` resource is used to configure the operator and its managed components. A comprehensive documentation is [available here](https://github.com/netobserv/network-observability-operator/blob/0.1.4/docs/FlowCollector.md), and a full sample file [there](https://github.com/netobserv/network-observability-operator/blob/0.1.4/config/samples/flows_v1alpha1_flowcollector.yaml).

        As it operates cluster-wide, only a single `FlowCollector` is allowed, and it has to be named `cluster`.

        A couple of settings deserve special attention:

        - Agent (`spec.agent`) can be `ipfix` or `ebpf`. The IPFIX option is fully functional when using [OVN-Kubernetes](https://github.com/ovn-org/ovn-kubernetes/) CNI. Other CNIs are not supported, but you may still be able to configure them manually if they allow IPFIX exports, whereas eBPF is expected to work regardless of the running CNI.

        - Sampling (`spec.ipfix.sampling` and `spec.ebpf.sampling`): 24/7 unsampled flow collection may consume a non-negligible amount of resources. While we are doing our best to make it a viable option in production, it is still often necessary to mitigate by setting a sampling ratio. A value of `100` means: one flow every 100 is sampled. `1` means no sampling. The lower it is, the more accurate are flows and derived metrics. By default, sampling is set to 400 for IPFIX, and is disabled for eBPF.

        - Loki (`spec.loki`): configure here how to reach Loki. The default values match the Loki quick install paths mentioned above, but you may have to configure differently if you used another installation method.

        - Kafka (`spec.kafka`): _experimental_ - when enabled, integrate the flow collection pipeline with Kafka, by splitting ingestion from transformation (kube enrichment, derived metrics, ...). Assumes Kafka is already deployed and a topic is created.

        ## Overview

        ### OpenShift Console

        _Pre-requisite: OpenShift 4.10 or above_

        If the OpenShift Console is detected in the cluster, a console plugin is deployed when `FlowCollector` is installed. It adds new pages and tabs to the console:

        - A flow table, with powerful filtering and display options

        - A network topology, with the same filtering options and several levels of aggregations (nodes, namespaces, owner controllers, pods). A side panel provides contextual insight and metrics.

        These components are accessible directly from the main menu, and also as contextual tabs for any Pod, Deployment, Service (etc.) in their details page.

        ### Grafana

        Grafana can be used to retrieve and show the collected flows from Loki. In Grafana, add a new Loki data source that matches your setup. If you used the quick install commands provided above to install Loki, its access URL is `http://loki:3100`.

        To get dashboards, import [this file](https://github.com/netobserv/network-observability-operator/blob/0.1.4/config/samples/dashboards/Network%20Observability.json) into Grafana. It includes a table of the flows and some graphs showing the volumetry per source or destination namespaces or workload:

        See more info and screenshots on [GitHub's readme](https://github.com/netobserv/network-observability-operator/blob/0.1.4/README.md)

        ## F.A.Q / Troubleshooting

        See [the F.A.Q on GitHub](https://github.com/netobserv/network-observability-operator#faq--troubleshooting)
      displayName: NetObserv Operator
      installModes:
      - supported: true
        type: OwnNamespace
      - supported: false
        type: SingleNamespace
      - supported: false
        type: MultiNamespace
      - supported: true
        type: AllNamespaces
      keywords:
      - network observability
      - ebpf
      - ipfix
      - flow tracing
      - flows
      - topology
      - network
      - observability
      links:
      - name: Project page
        url: https://github.com/netobserv/network-observability-operator
      - name: Issue tracker
        url: https://github.com/netobserv/network-observability-operator/issues
      - name: Discussion board
        url: https://github.com/netobserv/network-observability-operator/discussions
      maintainers:
      - email: jtakvori@redhat.com
        name: Joel Takvorian
      - email: jpinsonn@redhat.com
        name: Julien Pinsonneau
      - email: mmaciasl@redhat.com
        name: Mario Macias
      - email: ocazade@redhat.com
        name: Olivier Cazade
      maturity: alpha
      provider:
        name: Red Hat
        url: https://www.redhat.com
      relatedImages:
      - quay.io/netobserv/network-observability-operator:0.1.4
      - gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0
      version: 0.1.4
    name: alpha
  defaultChannel: alpha
  packageName: netobserv-operator
  provider:
    name: Red Hat
    url: https://www.redhat.com
