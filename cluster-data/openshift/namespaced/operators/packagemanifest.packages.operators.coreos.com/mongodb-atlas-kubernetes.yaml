apiVersion: packages.operators.coreos.com/v1
kind: PackageManifest
metadata:
  creationTimestamp: "2022-10-03T18:25:13Z"
  labels:
    catalog: operatorhubio-catalog
    catalog-namespace: olm
    operatorframework.io/arch.amd64: supported
    operatorframework.io/os.linux: supported
    provider: MongoDB, Inc
    provider-url: ""
  name: mongodb-atlas-kubernetes
  namespace: operators
spec: {}
status:
  catalogSource: operatorhubio-catalog
  catalogSourceDisplayName: Community Operators
  catalogSourceNamespace: olm
  catalogSourcePublisher: OperatorHub.io
  channels:
  - currentCSV: mongodb-atlas-kubernetes.v0.4.0
    currentCSVDesc:
      annotations:
        alm-examples: |-
          [
            {
              "apiVersion": "atlas.mongodb.com/v1",
              "kind": "AtlasCluster",
              "metadata": {
                "name": "my-atlas-cluster"
              },
              "spec": {
                "name": "test-cluster",
                "projectRef": {
                  "name": "my-project"
                },
                "providerSettings": {
                  "instanceSizeName": "M10",
                  "providerName": "AWS",
                  "regionName": "US_EAST_1"
                }
              }
            },
            {
              "apiVersion": "atlas.mongodb.com/v1",
              "kind": "AtlasDatabaseUser",
              "metadata": {
                "name": "my-database-user"
              },
              "spec": {
                "databaseName": "admin",
                "passwordSecretRef": {
                  "name": "my-database-user-password"
                },
                "projectRef": {
                  "name": "my-project"
                },
                "roles": [
                  {
                    "databaseName": "admin",
                    "roleName": "readWriteAnyDatabase"
                  }
                ],
                "username": "david"
              }
            },
            {
              "apiVersion": "atlas.mongodb.com/v1",
              "kind": "AtlasProject",
              "metadata": {
                "name": "my-project"
              },
              "spec": {
                "connectionSecretRef": {
                  "name": "my-atlas-key"
                },
                "name": "Test Atlas Operator Project",
                "projectIpAccessList": [
                  {
                    "comment": "IP address for Application Server A",
                    "ipAddress": "192.0.2.15"
                  },
                  {
                    "comment": "CIDR block for Application Server B - D",
                    "ipAddress": "203.0.113.0/24"
                  },
                  {
                    "awsSecurityGroup": "sg-0026348ec11780bd1",
                    "comment": "Access Listed AWS Security Group"
                  }
                ]
              }
            }
          ]
        capabilities: Basic Install
        categories: Database
        description: The MongoDB Atlas Kubernetes Operator enables easy management
          of Clusters in MongoDB Atlas
        operators.operatorframework.io/builder: operator-sdk-v1.4.2
        operators.operatorframework.io/project_layout: go.kubebuilder.io/v3
      apiservicedefinitions: {}
      customresourcedefinitions:
        owned:
        - description: AtlasCluster is the Schema for the atlasclusters API
          displayName: Atlas Cluster
          kind: AtlasCluster
          name: atlasclusters.atlas.mongodb.com
          version: v1
        - description: AtlasDatabaseUser is the Schema for the Atlas Database User
            API
          displayName: Atlas Database User
          kind: AtlasDatabaseUser
          name: atlasdatabaseusers.atlas.mongodb.com
          version: v1
        - description: AtlasProject is the Schema for the atlasprojects API
          displayName: Atlas Project
          kind: AtlasProject
          name: atlasprojects.atlas.mongodb.com
          version: v1
      description: Kubernetes Operator which manages MongoDB Atlas Clusters from Kubernetes.
      displayName: MongoDB Atlas Operator
      installModes:
      - supported: false
        type: OwnNamespace
      - supported: false
        type: SingleNamespace
      - supported: false
        type: MultiNamespace
      - supported: true
        type: AllNamespaces
      keywords:
      - MongoDB
      - Atlas
      - Database
      - Replica Set
      - Cluster
      links:
      - name: Mongodb Atlas Kubernetes
        url: https://mongodb-atlas-kubernetes.domain
      maturity: alpha
      provider:
        name: MongoDB, Inc
        url: https://github.com/mongodb/mongodb-atlas-kubernetes
      relatedImages:
      - gcr.io/kubebuilder/kube-rbac-proxy:v0.5.0
      - mongodb/mongodb-atlas-kubernetes-operator:0.4.0
      version: 0.4.0
    name: alpha
  - currentCSV: mongodb-atlas-kubernetes.v1.0.0
    currentCSVDesc:
      annotations:
        alm-examples: |-
          [
            {
              "apiVersion": "atlas.mongodb.com/v1",
              "kind": "AtlasBackupPolicy",
              "metadata": {
                "name": "atlasbackuppolicy-sample"
              },
              "spec": {
                "id": "1",
                "items": [
                  {
                    "frequencyInterval": 6,
                    "frequencyType": "WEEKLY",
                    "id": "2",
                    "retentionUnit": "DAYS",
                    "retentionValue": 6
                  }
                ]
              }
            },
            {
              "apiVersion": "atlas.mongodb.com/v1",
              "kind": "AtlasBackupSchedule",
              "metadata": {
                "name": "atlasbackupschedule-sample"
              },
              "spec": {
                "autoExportEnabled": true,
                "policies": [
                  {
                    "name": "atlas-default-backuppolicy",
                    "namespace": "mongodb-atlas-system"
                  },
                  {
                    "name": "atlas-default-backuppolicy2",
                    "namespace": "mongodb-atlas-system"
                  }
                ],
                "referenceHourOfDay": 10,
                "referenceMinuteOfHour": 10,
                "restoreWindowDays": 2
              }
            },
            {
              "apiVersion": "atlas.mongodb.com/v1",
              "kind": "AtlasDatabaseUser",
              "metadata": {
                "name": "my-database-user"
              },
              "spec": {
                "databaseName": "admin",
                "passwordSecretRef": {
                  "name": "my-database-user-password"
                },
                "projectRef": {
                  "name": "my-project"
                },
                "roles": [
                  {
                    "databaseName": "admin",
                    "roleName": "readWriteAnyDatabase"
                  }
                ],
                "username": "david"
              }
            },
            {
              "apiVersion": "atlas.mongodb.com/v1",
              "kind": "AtlasDeployment",
              "metadata": {
                "name": "my-atlas-cluster"
              },
              "spec": {
                "deploymentSpec": {
                  "name": "test-cluster",
                  "providerSettings": {
                    "instanceSizeName": "M10",
                    "providerName": "AWS",
                    "regionName": "US_EAST_1"
                  }
                },
                "projectRef": {
                  "name": "my-project"
                }
              }
            },
            {
              "apiVersion": "atlas.mongodb.com/v1",
              "kind": "AtlasProject",
              "metadata": {
                "name": "my-project"
              },
              "spec": {
                "name": "Test Atlas Operator Project",
                "projectIpAccessList": [
                  {
                    "comment": "IP address for Application Server A",
                    "ipAddress": "192.0.2.15"
                  }
                ]
              }
            }
          ]
        capabilities: Basic Install
        categories: Database
        containerImage: mongodb/mongodb-atlas-kubernetes-operator:1.0.0
        description: The MongoDB Atlas Kubernetes Operator enables easy management
          of Clusters in MongoDB Atlas
        operators.operatorframework.io/builder: operator-sdk-v1.15.0+git
        operators.operatorframework.io/project_layout: go.kubebuilder.io/v2
      apiservicedefinitions: {}
      customresourcedefinitions:
        owned:
        - description: AtlasBackupPolicy is the Schema for the atlasbackuppolicies
            API
          displayName: Atlas Backup Policy
          kind: AtlasBackupPolicy
          name: atlasbackuppolicies.atlas.mongodb.com
          version: v1
        - description: AtlasBackupSchedule is the Schema for the atlasbackupschedules
            API
          displayName: Atlas Backup Schedule
          kind: AtlasBackupSchedule
          name: atlasbackupschedules.atlas.mongodb.com
          version: v1
        - description: AtlasDatabaseUser is the Schema for the Atlas Database User
            API
          displayName: Atlas Database User
          kind: AtlasDatabaseUser
          name: atlasdatabaseusers.atlas.mongodb.com
          version: v1
        - description: AtlasDeployment is the Schema for the atlasclusters API
          displayName: Atlas Deployment
          kind: AtlasDeployment
          name: atlasdeployments.atlas.mongodb.com
          version: v1
        - description: AtlasProject is the Schema for the atlasprojects API
          displayName: Atlas Project
          kind: AtlasProject
          name: atlasprojects.atlas.mongodb.com
          version: v1
      description: |
        The MongoDB Atlas Operator provides a native integration between the Kubernetes orchestration platform and MongoDB Atlas —
        the only multi-cloud document database service that gives you the versatility you need to build sophisticated and resilient applications that can adapt to changing customer demands and market trends.

        > Current Status: *Beta*. The Operator gives users the ability to provision
        > Atlas projects, clusters and database users using Kubernetes Specifications and bind connection information
        > into applications deployed to Kubernetes.

        ## Quick Start guide
        ### Step 1. Deploy Kubernetes operator by clicking Install button.

        ### Step 2. Create Atlas Cluster

        **1.** Create an Atlas API Key Secret
        In order to work with the Atlas Operator you need to provide [authentication information](https://docs.atlas.mongodb.com/configure-api-access)
         to allow the Atlas Operator to communicate with Atlas API. Once you have generated a Public and Private key in Atlas, you can create a Kuberentes Secret with:
        ```
        kubectl create secret generic mongodb-atlas-operator-api-key \
                 --from-literal="orgId=<the_atlas_organization_id>" \
                 --from-literal="publicApiKey=<the_atlas_api_public_key>" \
                 --from-literal="privateApiKey=<the_atlas_api_private_key>" \
                 -n openshift-operators
        ```
        (Note, that you should use the namespace where the Operator was installed - it's `openshift-operators` by default)

        **2.** Create an `AtlasProject` Custom Resource

        The `AtlasProject` CustomResource represents Atlas Projects in our Kubernetes cluster. You need to specify
        `projectIpAccessList` with the IP addresses or CIDR blocks of any hosts that will connect to the Atlas Cluster.
        ```
        apiVersion: atlas.mongodb.com/v1
        kind: AtlasProject
        metadata:
          name: my-project
        spec:
          name: Test Atlas Operator Project
          projectIpAccessList:
            - ipAddress: "192.0.2.15"
              comment: "IP address for Application Server A"
            - ipAddress: "203.0.113.0/24"
              comment: "CIDR block for Application Server B - D"
        ```
        **3.** Create an `AtlasDeployment` Custom Resource.
        The example below is a minimal configuration to create an M10 Atlas cluster in the AWS US East region. For a full list of properties, check
        `atlasclusters.atlas.mongodb.com` [CRD specification](config/crd/bases/atlas.mongodb.com_atlasclusters.yaml)):
        ```
        apiVersion: atlas.mongodb.com/v1
        kind: AtlasDeployment
        metadata:
          name: my-atlas-cluster
        spec:
          name: "Test-cluster"
          projectRef:
            name: my-project
          providerSettings:
            instanceSizeName: M10
            providerName: AWS
            regionName: US_EAST_1
        ```

        **4.** Create a database user password Kubernetes Secret
        The Secret must be created in the same namespace as the `AtlasDeployment` and `AtlasProject` were created.
        ```
        kubectl create secret generic the-user-password --from-literal="password=P@@sword%"
        ```

        **5.** Create an `AtlasDatabaseUser` Custom Resource

        In order to connect to an Atlas Cluster the database user needs to be created. `AtlasDatabaseUser` resource should reference
        the password Kubernetes Secret created in the previous step.
        ```
        apiVersion: atlas.mongodb.com/v1
        kind: AtlasDatabaseUser
        metadata:
          name: my-database-user
        spec:
          roles:
            - roleName: "readWriteAnyDatabase"
              databaseName: "admin"
          projectRef:
            name: my-project
          username: theuser
          passwordSecretRef:
            name: the-user-password
        ```
        **6.** Wait for the `AtlasDatabaseUser` Custom Resource to be ready

        Wait until the AtlasDatabaseUser resource gets to "ready" status (it will wait until the cluster is created that may take around 10 minutes):
        ```
        kubectl get atlasdatabaseusers my-database-user -o=jsonpath='{.status.conditions[?(@.type=="Ready")].status}'
        True
        ```
        ### Step 3. Connect your application to the Atlas Cluster

        The Atlas Operator will create a Kubernetes Secret with the information necessary to connect to the Atlas Cluster created
        in the previous step. An application in the same Kubernetes Cluster can mount and use the Secret:

        ```
        ...
        containers:
              - name: test-app
                env:
                 - name: "CONNECTION_STRING"
                   valueFrom:
                     secretKeyRef:
                       name: test-atlas-operator-project-test-cluster-theuser
                       key: connectionStringStandardSrv

        ```
      displayName: MongoDB Atlas Operator
      installModes:
      - supported: true
        type: OwnNamespace
      - supported: true
        type: SingleNamespace
      - supported: false
        type: MultiNamespace
      - supported: true
        type: AllNamespaces
      keywords:
      - MongoDB
      - Atlas
      - Database
      - Replica Set
      - Cluster
      links:
      - name: MongoDB Atlas Kubernetes
        url: https://github.com/mongodb/mongodb-atlas-kubernetes
      maintainers:
      - email: support@mongodb.com
        name: MongoDB, Inc
      maturity: beta
      provider:
        name: MongoDB, Inc
      relatedImages:
      - mongodb/mongodb-atlas-kubernetes-operator:1.0.0
      version: 1.0.0
    name: beta
  - currentCSV: mongodb-atlas-kubernetes.v1.3.0
    currentCSVDesc:
      annotations:
        alm-examples: |-
          [
            {
              "apiVersion": "atlas.mongodb.com/v1",
              "kind": "AtlasBackupPolicy",
              "metadata": {
                "name": "atlasbackuppolicy-sample"
              },
              "spec": {
                "id": "1",
                "items": [
                  {
                    "frequencyInterval": 6,
                    "frequencyType": "WEEKLY",
                    "id": "2",
                    "retentionUnit": "DAYS",
                    "retentionValue": 6
                  }
                ]
              }
            },
            {
              "apiVersion": "atlas.mongodb.com/v1",
              "kind": "AtlasBackupSchedule",
              "metadata": {
                "name": "atlasbackupschedule-sample"
              },
              "spec": {
                "autoExportEnabled": true,
                "policies": [
                  {
                    "name": "atlas-default-backuppolicy",
                    "namespace": "mongodb-atlas-system"
                  },
                  {
                    "name": "atlas-default-backuppolicy2",
                    "namespace": "mongodb-atlas-system"
                  }
                ],
                "referenceHourOfDay": 10,
                "referenceMinuteOfHour": 10,
                "restoreWindowDays": 2
              }
            },
            {
              "apiVersion": "atlas.mongodb.com/v1",
              "kind": "AtlasDatabaseUser",
              "metadata": {
                "name": "my-database-user"
              },
              "spec": {
                "databaseName": "admin",
                "passwordSecretRef": {
                  "name": "my-database-user-password"
                },
                "projectRef": {
                  "name": "my-project"
                },
                "roles": [
                  {
                    "databaseName": "admin",
                    "roleName": "readWriteAnyDatabase"
                  }
                ],
                "username": "david"
              }
            },
            {
              "apiVersion": "atlas.mongodb.com/v1",
              "kind": "AtlasDeployment",
              "metadata": {
                "name": "my-atlas-deployment"
              },
              "spec": {
                "deploymentSpec": {
                  "name": "test-deployment",
                  "providerSettings": {
                    "instanceSizeName": "M10",
                    "providerName": "AWS",
                    "regionName": "US_EAST_1"
                  }
                },
                "projectRef": {
                  "name": "my-project"
                }
              }
            },
            {
              "apiVersion": "atlas.mongodb.com/v1",
              "kind": "AtlasProject",
              "metadata": {
                "name": "my-project"
              },
              "spec": {
                "name": "Test Atlas Operator Project",
                "projectIpAccessList": [
                  {
                    "comment": "IP address for Application Server A",
                    "ipAddress": "192.0.2.15"
                  }
                ]
              }
            }
          ]
        capabilities: Full Lifecycle
        categories: Database
        containerImage: quay.io/mongodb/mongodb-atlas-kubernetes-operator:1.3.0
        description: The MongoDB Atlas Kubernetes Operator enables easy management
          of Clusters in MongoDB Atlas
        operators.operatorframework.io/builder: operator-sdk-v1.15.0+git
        operators.operatorframework.io/project_layout: go.kubebuilder.io/v2
      apiservicedefinitions: {}
      customresourcedefinitions:
        owned:
        - description: AtlasBackupPolicy is the Schema for the atlasbackuppolicies
            API
          displayName: Atlas Backup Policy
          kind: AtlasBackupPolicy
          name: atlasbackuppolicies.atlas.mongodb.com
          version: v1
        - description: AtlasBackupSchedule is the Schema for the atlasbackupschedules
            API
          displayName: Atlas Backup Schedule
          kind: AtlasBackupSchedule
          name: atlasbackupschedules.atlas.mongodb.com
          version: v1
        - description: AtlasDatabaseUser is the Schema for the Atlas Database User
            API
          displayName: Atlas Database User
          kind: AtlasDatabaseUser
          name: atlasdatabaseusers.atlas.mongodb.com
          version: v1
        - description: AtlasDeployment is the Schema for the atlasdeployments API
          displayName: Atlas Deployment
          kind: AtlasDeployment
          name: atlasdeployments.atlas.mongodb.com
          version: v1
        - description: AtlasProject is the Schema for the atlasprojects API
          displayName: Atlas Project
          kind: AtlasProject
          name: atlasprojects.atlas.mongodb.com
          version: v1
      description: |
        The MongoDB Atlas Operator provides a native integration between the Kubernetes orchestration platform and MongoDB Atlas —
        the only multi-cloud document database service that gives you the versatility you need to build sophisticated and resilient applications that can adapt to changing customer demands and market trends.

        > Current Status: *Beta*. The Operator gives users the ability to provision
        > Atlas projects, clusters and database users using Kubernetes Specifications and bind connection information
        > into applications deployed to Kubernetes.

        ## Quick Start guide
        ### Step 1. Deploy Kubernetes operator by clicking Install button.

        ### Step 2. Create Atlas Cluster

        **1.** Create an Atlas API Key Secret
        In order to work with the Atlas Operator you need to provide [authentication information](https://docs.atlas.mongodb.com/configure-api-access)
         to allow the Atlas Operator to communicate with Atlas API. Once you have generated a Public and Private key in Atlas, you can create a Kuberentes Secret with:
        ```
        kubectl create secret generic mongodb-atlas-operator-api-key \
                 --from-literal="orgId=<the_atlas_organization_id>" \
                 --from-literal="publicApiKey=<the_atlas_api_public_key>" \
                 --from-literal="privateApiKey=<the_atlas_api_private_key>" \
                 -n openshift-operators
        ```
        (Note, that you should use the namespace where the Operator was installed - it's `openshift-operators` by default)

        **2.** Create an `AtlasProject` Custom Resource

        The `AtlasProject` CustomResource represents Atlas Projects in our Kubernetes cluster. You need to specify
        `projectIpAccessList` with the IP addresses or CIDR blocks of any hosts that will connect to the Atlas Cluster.
        ```
        apiVersion: atlas.mongodb.com/v1
        kind: AtlasProject
        metadata:
          name: my-project
        spec:
          name: Test Atlas Operator Project
          projectIpAccessList:
            - ipAddress: "192.0.2.15"
              comment: "IP address for Application Server A"
            - ipAddress: "203.0.113.0/24"
              comment: "CIDR block for Application Server B - D"
        ```
        **3.** Create an `AtlasDeployment` Custom Resource.
        The example below is a minimal configuration to create an M10 Atlas cluster in the AWS US East region. For a full list of properties, check
        `atlasclusters.atlas.mongodb.com` [CRD specification](config/crd/bases/atlas.mongodb.com_atlasclusters.yaml)):
        ```
        apiVersion: atlas.mongodb.com/v1
        kind: AtlasDeployment
        metadata:
          name: my-atlas-cluster
        spec:
          name: "Test-cluster"
          projectRef:
            name: my-project
          providerSettings:
            instanceSizeName: M10
            providerName: AWS
            regionName: US_EAST_1
        ```

        **4.** Create a database user password Kubernetes Secret
        The Secret must be created in the same namespace as the `AtlasDeployment` and `AtlasProject` were created.
        ```
        kubectl create secret generic the-user-password --from-literal="password=P@@sword%"
        ```

        **5.** Create an `AtlasDatabaseUser` Custom Resource

        In order to connect to an Atlas Cluster the database user needs to be created. `AtlasDatabaseUser` resource should reference
        the password Kubernetes Secret created in the previous step.
        ```
        apiVersion: atlas.mongodb.com/v1
        kind: AtlasDatabaseUser
        metadata:
          name: my-database-user
        spec:
          roles:
            - roleName: "readWriteAnyDatabase"
              databaseName: "admin"
          projectRef:
            name: my-project
          username: theuser
          passwordSecretRef:
            name: the-user-password
        ```
        **6.** Wait for the `AtlasDatabaseUser` Custom Resource to be ready

        Wait until the AtlasDatabaseUser resource gets to "ready" status (it will wait until the cluster is created that may take around 10 minutes):
        ```
        kubectl get atlasdatabaseusers my-database-user -o=jsonpath='{.status.conditions[?(@.type=="Ready")].status}'
        True
        ```
        ### Step 3. Connect your application to the Atlas Cluster

        The Atlas Operator will create a Kubernetes Secret with the information necessary to connect to the Atlas Cluster created
        in the previous step. An application in the same Kubernetes Cluster can mount and use the Secret:

        ```
        ...
        containers:
              - name: test-app
                env:
                 - name: "CONNECTION_STRING"
                   valueFrom:
                     secretKeyRef:
                       name: test-atlas-operator-project-test-cluster-theuser
                       key: connectionStringStandardSrv

        ```
      displayName: MongoDB Atlas Operator
      installModes:
      - supported: true
        type: OwnNamespace
      - supported: true
        type: SingleNamespace
      - supported: false
        type: MultiNamespace
      - supported: true
        type: AllNamespaces
      keywords:
      - MongoDB
      - Atlas
      - Database
      - Replica Set
      - Cluster
      links:
      - name: MongoDB Atlas Kubernetes
        url: https://github.com/mongodb/mongodb-atlas-kubernetes
      maintainers:
      - email: support@mongodb.com
        name: MongoDB, Inc
      maturity: beta
      provider:
        name: MongoDB, Inc
      relatedImages:
      - quay.io/mongodb/mongodb-atlas-kubernetes-operator:1.3.0
      version: 1.3.0
    name: stable
  defaultChannel: stable
  packageName: mongodb-atlas-kubernetes
  provider:
    name: MongoDB, Inc
