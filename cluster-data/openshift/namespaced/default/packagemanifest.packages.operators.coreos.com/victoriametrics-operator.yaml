apiVersion: packages.operators.coreos.com/v1
kind: PackageManifest
metadata:
  creationTimestamp: "2022-10-03T18:25:13Z"
  labels:
    catalog: operatorhubio-catalog
    catalog-namespace: olm
    operatorframework.io/arch.amd64: supported
    operatorframework.io/arch.arm64: supported
    operatorframework.io/arch.ppc64le: supported
    operatorframework.io/os.linux: supported
    provider: VictoriaMetrics
    provider-url: ""
  name: victoriametrics-operator
  namespace: default
spec: {}
status:
  catalogSource: operatorhubio-catalog
  catalogSourceDisplayName: Community Operators
  catalogSourceNamespace: olm
  catalogSourcePublisher: OperatorHub.io
  channels:
  - currentCSV: victoriametrics-operator.v0.27.2
    currentCSVDesc:
      annotations:
        alm-examples: |-
          [
            {
              "apiVersion": "operator.victoriametrics.com/v1beta1",
              "kind": "VMAgent",
              "metadata": {
                "name": "example-vmagent"
              },
              "spec": {
                "extraArgs": {
                  "memory.allowedPercent": "40"
                },
                "nodeScrapeSelector": {},
                "podScrapeSelector": {},
                "probeSelector": {},
                "remoteWrite": [
                  {
                    "url": "http://vmsingle-example-vmsingle-pvc.default.svc:8429/api/v1/write"
                  }
                ],
                "replicaCount": 1,
                "resources": {
                  "limits": {
                    "cpu": "500m",
                    "memory": "850Mi"
                  },
                  "requests": {
                    "cpu": "250m",
                    "memory": "350Mi"
                  }
                },
                "serviceScrapeSelector": {},
                "staticScrapeSelector": {}
              }
            },
            {
              "apiVersion": "operator.victoriametrics.com/v1beta1",
              "kind": "VMAlert",
              "metadata": {
                "name": "example-vmalert"
              },
              "spec": {
                "datasource": {
                  "url": "http://vmsingle-example-vmsingle-pvc.default.svc:8429"
                },
                "evaluationInterval": "30s",
                "notifiers": [
                  {
                    "url": "http://vmalertmanager-example-alertmanager.default.svc:9093"
                  }
                ],
                "remoteRead": {
                  "url": "http://vmsingle-example-vmsingle-pvc.default.svc:8429"
                },
                "remoteWrite": {
                  "concurrency": 12,
                  "url": "http://vmsingle-example-vmsingle-pvc.default.svc:8429"
                },
                "replicaCount": 1,
                "resources": {
                  "limits": {
                    "cpu": "350m",
                    "memory": "450Mi"
                  },
                  "requests": {
                    "cpu": "150m",
                    "memory": "350Mi"
                  }
                },
                "ruleSelector": {}
              }
            },
            {
              "apiVersion": "operator.victoriametrics.com/v1beta1",
              "kind": "VMAlertmanager",
              "metadata": {
                "name": "example-alertmanager"
              },
              "spec": {
                "configNamespaceSelector": {},
                "configRawYaml": "global:\n  resolve_timeout: 5m\nroute:\n  group_wait: 30s\n  group_interval: 5m\n  repeat_interval: 12h\n  receiver: 'webhook'\nreceivers:\n- name: 'webhook'\n  webhook_configs:\n  - url: 'http://localhost:30502/'\n",
                "configSelector": {},
                "replicaCount": 1,
                "resources": {
                  "limits": {
                    "cpu": "100m",
                    "memory": "250Mi"
                  },
                  "requests": {
                    "cpu": "50m",
                    "memory": "150Mi"
                  }
                }
              }
            },
            {
              "apiVersion": "operator.victoriametrics.com/v1beta1",
              "kind": "VMAlertmanagerConfig",
              "metadata": {
                "name": "vmalertmanagerconfig-sample"
              },
              "spec": {
                "receivers": [
                  {
                    "name": "base",
                    "webhook_configs": [
                      {
                        "url": "http://some-url"
                      }
                    ]
                  }
                ],
                "route": {
                  "group_interval": "1m",
                  "receiver": "base"
                }
              }
            },
            {
              "apiVersion": "operator.victoriametrics.com/v1beta1",
              "kind": "VMAuth",
              "metadata": {
                "name": "vmauth-sample"
              },
              "spec": {
                "replicaCount": 1,
                "resources": {
                  "limits": {
                    "cpu": "500m",
                    "memory": "850Mi"
                  },
                  "requests": {
                    "cpu": "250m",
                    "memory": "350Mi"
                  }
                },
                "selectAllByDefault": true
              }
            },
            {
              "apiVersion": "operator.victoriametrics.com/v1beta1",
              "kind": "VMCluster",
              "metadata": {
                "name": "example-vmcluster-persistent"
              },
              "spec": {
                "replicationFactor": 2,
                "retentionPeriod": "4",
                "vminsert": {
                  "replicaCount": 2,
                  "resources": {
                    "limits": {
                      "cpu": "1",
                      "memory": "1000Mi"
                    },
                    "requests": {
                      "cpu": "0.5",
                      "memory": "500Mi"
                    }
                  }
                },
                "vmselect": {
                  "cacheMountPath": "/select-cache",
                  "replicaCount": 2,
                  "resources": {
                    "limits": {
                      "cpu": "1",
                      "memory": "1000Mi"
                    },
                    "requests": {
                      "cpu": "0.5",
                      "memory": "500Mi"
                    }
                  },
                  "storage": {
                    "volumeClaimTemplate": {
                      "spec": {
                        "resources": {
                          "requests": {
                            "storage": "2Gi"
                          }
                        }
                      }
                    }
                  }
                },
                "vmstorage": {
                  "replicaCount": 2,
                  "resources": {
                    "limits": {
                      "cpu": "1",
                      "memory": "1500Mi"
                    }
                  },
                  "storage": {
                    "volumeClaimTemplate": {
                      "spec": {
                        "resources": {
                          "requests": {
                            "storage": "10Gi"
                          }
                        }
                      }
                    }
                  },
                  "storageDataPath": "/vm-data"
                }
              }
            },
            {
              "apiVersion": "operator.victoriametrics.com/v1beta1",
              "kind": "VMNodeScrape",
              "metadata": {
                "name": "vmnodescrape-sample"
              },
              "spec": {
                "bearerTokenFile": "/var/run/secrets/kubernetes.io/serviceaccount/token",
                "interval": "10s",
                "jobLabel": "beta.kubernetes.io/os",
                "path": "/metrics",
                "port": "9100",
                "relabelConfigs": [
                  {
                    "sourceLabels": [
                      "node"
                    ],
                    "targetLabel": "kubernetes_io_node1"
                  }
                ],
                "scheme": "http",
                "scrapeTimeout": "2s",
                "selector": {
                  "matchLabels": {
                    "role": "node-exporter"
                  }
                },
                "targetLabels": [
                  "beta.kubernetes.io/os"
                ],
                "tlsConfig": {
                  "caFile": "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt",
                  "insecureSkipVerify": true
                }
              }
            },
            {
              "apiVersion": "operator.victoriametrics.com/v1beta1",
              "kind": "VMPodScrape",
              "metadata": {
                "name": "example-pod-scrape"
              },
              "spec": {
                "podMetricsEndpoints": [
                  {
                    "port": "metrics",
                    "scheme": "http"
                  }
                ],
                "selector": {
                  "matchLabels": {
                    "app.kubernetes.io/name": "example-application",
                    "monitored-by": "vm-operator"
                  }
                }
              }
            },
            {
              "apiVersion": "operator.victoriametrics.com/v1beta1",
              "kind": "VMProbe",
              "metadata": {
                "name": "probe-agent"
              },
              "spec": {
                "interval": "2s",
                "jobName": "static-probe",
                "module": "http_2xx",
                "targets": {
                  "staticConfig": {
                    "targets": [
                      "vmagent-example-vmagent.default.svc:8429/health"
                    ]
                  }
                },
                "vmProberSpec": {
                  "url": "prometheus-blackbox-exporter.default.svc:9115"
                }
              }
            },
            {
              "apiVersion": "operator.victoriametrics.com/v1beta1",
              "kind": "VMRule",
              "metadata": {
                "name": "example-vmrule"
              },
              "spec": {
                "groups": [
                  {
                    "name": "kafka",
                    "rules": [
                      {
                        "alert": "coordinator down",
                        "annotations": {
                          "description": "kafka coorinator is down",
                          "value": "{{ $value }}"
                        },
                        "expr": "ml_app_gauge{exec_context=\"consumer_group_state\"} == 0",
                        "for": "60s",
                        "labels": {
                          "job": "{{ $labels.job }}",
                          "severity": "critical"
                        }
                      }
                    ]
                  }
                ]
              }
            },
            {
              "apiVersion": "operator.victoriametrics.com/v1beta1",
              "kind": "VMServiceScrape",
              "metadata": {
                "labels": {
                  "control-plane": "controller-manager"
                },
                "name": "vm-operator-controller-manager-metrics-monitor",
                "namespace": "monitoring-system"
              },
              "spec": {
                "endpoints": [
                  {
                    "path": "/metrics",
                    "port": "https"
                  }
                ],
                "selector": {
                  "matchLabels": {
                    "control-plane": "controller-manager"
                  }
                }
              }
            },
            {
              "apiVersion": "operator.victoriametrics.com/v1beta1",
              "kind": "VMServiceScrape",
              "metadata": {
                "name": "example-scrape"
              },
              "spec": {
                "discoveryRole": "endpoints",
                "endpoints": [
                  {
                    "port": "http",
                    "relabelConfigs": [
                      {
                        "sourceLabels": [
                          "__address__"
                        ],
                        "targetLabel": "addr"
                      },
                      {
                        "regex": ".+:(.+)",
                        "replacement": "$1",
                        "sourceLabels": [
                          "__address__"
                        ],
                        "targetLabel": "addr_port"
                      }
                    ],
                    "scrapeTimeout": "2s"
                  }
                ],
                "namespaceSelector": {},
                "selector": {
                  "matchLabels": {
                    "app.kubernetes.io/name": "example-application",
                    "monitored-by": "vm-operator"
                  }
                }
              }
            },
            {
              "apiVersion": "operator.victoriametrics.com/v1beta1",
              "kind": "VMSingle",
              "metadata": {
                "name": "example-vmsingle-pvc"
              },
              "spec": {
                "removePvcAfterDelete": true,
                "resources": {
                  "limits": {
                    "cpu": "500m",
                    "memory": "850Mi"
                  },
                  "requests": {
                    "cpu": "250m",
                    "memory": "350Mi"
                  }
                },
                "retentionPeriod": "2w",
                "storage": {
                  "accessModes": [
                    "ReadWriteOnce"
                  ],
                  "resources": {
                    "requests": {
                      "storage": "20Gi"
                    }
                  }
                }
              }
            },
            {
              "apiVersion": "operator.victoriametrics.com/v1beta1",
              "kind": "VMStaticScrape",
              "metadata": {
                "name": "vmstaticscrape-sample"
              },
              "spec": {
                "jobName": "static",
                "targetEndpoints": [
                  {
                    "labels": {
                      "env": "dev",
                      "project": "operator"
                    },
                    "relabelConfigs": [
                      {
                        "replacement": "default",
                        "target_label": "namespace"
                      }
                    ],
                    "targets": [
                      "192.168.0.1:9100",
                      "196.168.0.50:9100"
                    ]
                  },
                  {
                    "bearerTokenFile": "/var/run/secrets/kubernetes.io/serviceaccount/token",
                    "labels": {
                      "env": "secure"
                    },
                    "scheme": "https",
                    "targets": [
                      "secure-target-1:6443"
                    ],
                    "tlsConfig": {
                      "caFile": "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt",
                      "insecureSkipVerify": true
                    }
                  },
                  {
                    "basicAuth": {
                      "password": {
                        "key": "password",
                        "name": "bau-secret"
                      },
                      "username": {
                        "key": "user",
                        "name": "bau-secret"
                      }
                    },
                    "interval": "10s",
                    "params": {
                      "select": [
                        "param1"
                      ]
                    },
                    "scrapeTimeout": "20s",
                    "targets": [
                      "basic-auth:8080"
                    ]
                  }
                ]
              }
            },
            {
              "apiVersion": "operator.victoriametrics.com/v1beta1",
              "kind": "VMUser",
              "metadata": {
                "name": "vmuser-sample"
              },
              "spec": {
                "password": "simple-password",
                "targetRefs": [
                  {
                    "paths": [
                      "/"
                    ],
                    "static": {
                      "url": "http://vmsingle-sample.default.svc:8429"
                    }
                  },
                  {
                    "paths": [
                      "/targets",
                      "/api/v1/targets",
                      "/api/v1/write"
                    ],
                    "static": {
                      "url": "http://vmagent-sample.default.svc:8429"
                    }
                  }
                ],
                "username": "simple-user"
              }
            }
          ]
        capabilities: Deep Insights
        categories: Monitoring
        certified: "false"
        containerImage: docker.io/victoriametrics/operator:v0.27.2
        createdAt: "2020-05-01 12:00:00"
        description: Provides monitoring capabilites for kubernetes clusters and applications
        operators.operatorframework.io/builder: operator-sdk-v1.0.0
        operators.operatorframework.io/project_layout: go.kubebuilder.io/v2
        repository: https://github.com/VictoriaMetrics/operator
        support: VictoriaMetrics
      apiservicedefinitions: {}
      customresourcedefinitions:
        owned:
        - description: VMAgent - is a tiny but brave agent, which helps you collect
            metrics from various sources and stores them in VictoriaMetrics or any
            other Prometheus-compatible storage system that supports the remote_write
            protocol.
          displayName: VMAgent
          kind: VMAgent
          name: vmagents.operator.victoriametrics.com
          version: v1beta1
        - kind: VMAlertmanagerConfig
          name: vmalertmanagerconfigs.operator.victoriametrics.com
          version: v1beta1
        - description: VMAlertmanager represents Victoria-Metrics deployment for Alertmanager.
          displayName: VMAlertmanager
          kind: VMAlertmanager
          name: vmalertmanagers.operator.victoriametrics.com
          version: v1beta1
        - description: VMAlert  executes a list of given alerting or recording rules
            against configured address.
          displayName: VMAlert
          kind: VMAlert
          name: vmalerts.operator.victoriametrics.com
          version: v1beta1
        - description: VMAuth is the Schema for the vmauths API
          displayName: VMAuth
          kind: VMAuth
          name: vmauths.operator.victoriametrics.com
          version: v1beta1
        - description: VMCluster is fast, cost-effective and scalable time-series
            database. Cluster version with
          displayName: VMCluster
          kind: VMCluster
          name: vmclusters.operator.victoriametrics.com
          version: v1beta1
        - description: VMNodeScrape defines discovery for targets placed on kubernetes
            nodes, usually its node-exporters and other host services. InternalIP
            is used as __address__ for scraping.
          displayName: VMNode Scrape
          kind: VMNodeScrape
          name: vmnodescrapes.operator.victoriametrics.com
          version: v1beta1
        - description: VMPodScrape is scrape configuration for pods, it generates
            vmagent's config for scraping pod targets based on selectors.
          displayName: VMPod Scrape
          kind: VMPodScrape
          name: vmpodscrapes.operator.victoriametrics.com
          version: v1beta1
        - description: ' VMProbe defines a probe for targets, that will be executed
            with prober,  like blackbox exporter. It helps to monitor reachability
            of target with various checks.'
          displayName: VMProbe
          kind: VMProbe
          name: vmprobes.operator.victoriametrics.com
          version: v1beta1
        - description: VMRule defines rule records for vmalert application
          displayName: VMRule
          kind: VMRule
          name: vmrules.operator.victoriametrics.com
          version: v1beta1
        - description: VMServiceScrape is scrape configuration for endpoints associated
            with kubernetes service, it generates scrape configuration for vmagent
            based on selectors. result config will scrape service endpoints
          displayName: VMService Scrape
          kind: VMServiceScrape
          name: vmservicescrapes.operator.victoriametrics.com
          version: v1beta1
        - description: VMSingle  is fast, cost-effective and scalable time-series
            database.
          displayName: VMSingle
          kind: VMSingle
          name: vmsingles.operator.victoriametrics.com
          version: v1beta1
        - description: VMStaticScrape  defines static targets configuration for scraping.
          displayName: VMStatic Scrape
          kind: VMStaticScrape
          name: vmstaticscrapes.operator.victoriametrics.com
          version: v1beta1
        - description: VMUser is the Schema for the vmusers API
          displayName: VMUser
          kind: VMUser
          name: vmusers.operator.victoriametrics.com
          version: v1beta1
      description: |
        Operator manages VictoriaMetrics applications and provides monitoring features for applications running inside and outside kubernetes cluster. It has support for prometheus-operator objects and
        provides migration mechanism.

        Operator desinged to use existing installation of VictoriaMetrics inside or outside kubernetes cluster or it could
        bring own resources and fully manages them.

         You can read more about operator at docs:
          - quick start [doc](https://github.com/VictoriaMetrics/operator/docs/quick-start.MD)
          - high availability [doc](https://github.com/VictoriaMetrics/operator/docs/high-availability.MD)
          - design and description of implementation [design](https://github.com/VictoriaMetrics/operator/docs/design.MD)
          - operator objects description [doc](https://github.com/VictoriaMetrics/operator/docs/api.MD)

        # VictoriaMetrics
        * VictoriaMetrics can be used as long-term storage for Prometheus or for [vmagent](https://github.com/VictoriaMetrics/VictoriaMetrics/blob/master/app/vmagent/README.md).
        See [these docs](https://github.com/VictoriaMetrics/VictoriaMetrics#prometheus-setup) for details.
        * Supports [Prometheus querying API](https://prometheus.io/docs/prometheus/latest/querying/api/), so it can be used as Prometheus drop-in replacement in Grafana.
        VictoriaMetrics implements [MetricsQL](https://github.com/VictoriaMetrics/VictoriaMetrics/wiki/MetricsQL) query language, which is inspired by PromQL.
        * Supports global query view. Multiple Prometheus instances may write data into VictoriaMetrics. Later this data may be used in a single query.
        * High performance and good scalability for both [inserts](https://medium.com/@valyala/high-cardinality-tsdb-benchmarks-victoriametrics-vs-timescaledb-vs-influxdb-13e6ee64dd6b)
        and [selects](https://medium.com/@valyala/when-size-matters-benchmarking-victoriametrics-vs-timescale-and-influxdb-6035811952d4).
        [Outperforms InfluxDB and TimescaleDB by up to 20x](https://medium.com/@valyala/measuring-vertical-scalability-for-time-series-databases-in-google-cloud-92550d78d8ae).
        * [Uses 10x less RAM than InfluxDB](https://medium.com/@valyala/insert-benchmarks-with-inch-influxdb-vs-victoriametrics-e31a41ae2893) when working with millions of unique time series (aka high cardinality).
        * Optimized for time series with high churn rate. Think about [prometheus-operator](https://github.com/coreos/prometheus-operator) metrics from frequent deployments in Kubernetes.
        * High data compression, so [up to 70x more data points](https://medium.com/@valyala/when-size-matters-benchmarking-victoriametrics-vs-timescale-and-influxdb-6035811952d4)
        may be crammed into limited storage comparing to TimescaleDB.
        * Optimized for storage with high-latency IO and low IOPS (HDD and network storage in AWS, Google Cloud, Microsoft Azure, etc). See [graphs from these benchmarks](https://medium.com/@valyala/high-cardinality-tsdb-benchmarks-victoriametrics-vs-timescaledb-vs-influxdb-13e6ee64dd6b).
        * A single-node VictoriaMetrics may substitute moderately sized clusters built with competing solutions such as Thanos, M3DB, Cortex, InfluxDB or TimescaleDB.
        See [vertical scalability benchmarks](https://medium.com/@valyala/measuring-vertical-scalability-for-time-series-databases-in-google-cloud-92550d78d8ae),
        [comparing Thanos to VictoriaMetrics cluster](https://medium.com/@valyala/comparing-thanos-to-victoriametrics-cluster-b193bea1683)
        and [Remote Write Storage Wars](https://promcon.io/2019-munich/talks/remote-write-storage-wars/) talk
        from [PromCon 2019](https://promcon.io/2019-munich/talks/remote-write-storage-wars/).
        * Easy operation:
            * VictoriaMetrics consists of a single [small executable](https://medium.com/@valyala/stripping-dependency-bloat-in-victoriametrics-docker-image-983fb5912b0d) without external dependencies.
            * All the configuration is done via explicit command-line flags with reasonable defaults.
            * All the data is stored in a single directory pointed by `-storageDataPath` flag.
            * Easy and fast backups from [instant snapshots](https://medium.com/@valyala/how-victoriametrics-makes-instant-snapshots-for-multi-terabyte-time-series-data-e1f3fb0e0282)
            to S3 or GCS with [vmbackup](https://github.com/VictoriaMetrics/VictoriaMetrics/blob/master/app/vmbackup/README.md) / [vmrestore](https://github.com/VictoriaMetrics/VictoriaMetrics/blob/master/app/vmrestore/README.md).
            See [this article](https://medium.com/@valyala/speeding-up-backups-for-big-time-series-databases-533c1a927883) for more details.
        * Storage is protected from corruption on unclean shutdown (i.e. OOM, hardware reset or `kill -9`) thanks to [the storage architecture](https://medium.com/@valyala/how-victoriametrics-makes-instant-snapshots-for-multi-terabyte-time-series-data-e1f3fb0e0282).
        * Supports metrics' scraping, ingestion and [backfilling](https://github.com/VictoriaMetrics/VictoriaMetrics#backfilling) via the following protocols:
          * [Metrics from Prometheus exporters](https://github.com/prometheus/docs/blob/master/content/docs/instrumenting/exposition_formats.md#text-based-format)
            such as [node_exporter](https://github.com/prometheus/node_exporter). See [these docs](https://github.com/VictoriaMetrics/VictoriaMetrics#how-to-scrape-prometheus-exporters-such-as-node-exporter) for details.
            * [Prometheus remote write API](https://prometheus.io/docs/prometheus/latest/configuration/configuration/#remote_write)
            * [InfluxDB line protocol](https://github.com/VictoriaMetrics/VictoriaMetrics#how-to-send-data-from-influxdb-compatible-agents-such-as-telegraf) over HTTP, TCP and UDP.
            * [Graphite plaintext protocol](https://github.com/VictoriaMetrics/VictoriaMetrics#how-to-send-data-from-graphite-compatible-agents-such-as-statsd) with [tags](https://graphite.readthedocs.io/en/latest/tags.html#carbon)
            if `-graphiteListenAddr` is set.
            * [OpenTSDB put message](https://github.com/VictoriaMetrics/VictoriaMetrics#sending-data-via-telnet-put-protocol) if `-opentsdbListenAddr` is set.
            * [HTTP OpenTSDB /api/put requests](https://github.com/VictoriaMetrics/VictoriaMetrics#sending-opentsdb-data-via-http-apiput-requests) if `-opentsdbHTTPListenAddr` is set.
            * [How to import time series data](https://github.com/VictoriaMetrics/VictoriaMetrics#how-to-import-time-series-data).
            * [Prometheus exposition format](https://github.com/VictoriaMetrics/VictoriaMetrics#how-to-import-data-in-prometheus-exposition-format).
            * [Arbitrary CSV data](https://github.com/VictoriaMetrics/VictoriaMetrics#how-to-import-csv-data).
        * Supports metrics' relabeling. See [these docs](https://github.com/VictoriaMetrics/VictoriaMetrics#relabeling) for details.
        * Ideally works with big amounts of time series data from Kubernetes, IoT sensors, connected cars, industrial telemetry, financial data and various Enterprise workloads.
      displayName: VictoriaMetrics Operator
      installModes:
      - supported: true
        type: OwnNamespace
      - supported: true
        type: SingleNamespace
      - supported: false
        type: MultiNamespace
      - supported: true
        type: AllNamespaces
      keywords:
      - monitoring
      - prometheus
      - victoriametrics
      links:
      - name: VictoriaMetrics
        url: https://victoriametrics.com
      maintainers:
      - email: nik@victoriametrics.com
        name: f41gh7
      - email: info@victoriametrics.com
        name: info
      maturity: beta
      provider:
        name: VictoriaMetrics
      relatedImages:
      - docker.io/victoriametrics/operator:v0.27.2
      version: 0.27.2
    name: beta
  defaultChannel: beta
  packageName: victoriametrics-operator
  provider:
    name: VictoriaMetrics
