apiVersion: packages.operators.coreos.com/v1
kind: PackageManifest
metadata:
  creationTimestamp: "2022-10-03T18:25:13Z"
  labels:
    catalog: operatorhubio-catalog
    catalog-namespace: olm
    operatorframework.io/arch.amd64: supported
    operatorframework.io/os.linux: supported
    provider: kubernetes-sigs
    provider-url: ""
  name: nfd-operator
  namespace: default
spec: {}
status:
  catalogSource: operatorhubio-catalog
  catalogSourceDisplayName: Community Operators
  catalogSourceNamespace: olm
  catalogSourcePublisher: OperatorHub.io
  channels:
  - currentCSV: nfd-operator.v0.5.0
    currentCSVDesc:
      annotations:
        alm-examples: |-
          [
            {
              "apiVersion": "nfd.kubernetes.io/v1",
              "kind": "NodeFeatureDiscovery",
              "metadata": {
                "name": "nfd-master-server",
                "namespace": "node-feature-discovery-operator"
              },
              "spec": {
                "instance": "",
                "operand": {
                  "image": "k8s.gcr.io/nfd/node-feature-discovery:v0.11.0-minimal",
                  "imagePullPolicy": "IfNotPresent",
                  "servicePort": 12000
                },
                "workerConfig": {
                  "configData": "#core:\n#  labelWhiteList:\n#  noPublish: false\n#  sleepInterval: 60s\n#  sources: [all]\n#  klog:\n#    addDirHeader: false\n#    alsologtostderr: false\n#    logBacktraceAt:\n#    logtostderr: true\n#    skipHeaders: false\n#    stderrthreshold: 2\n#    v: 0\n#    vmodule:\n##   NOTE: the following options are not dynamically run-time configurable\n##         and require a nfd-worker restart to take effect after being changed\n#    logDir:\n#    logFile:\n#    logFileMaxSize: 1800\n#    skipLogHeaders: false\n#sources:\n#  cpu:\n#    cpuid:\n##     NOTE: whitelist has priority over blacklist\n#      attributeBlacklist:\n#        - \"BMI1\"\n#        - \"BMI2\"\n#        - \"CLMUL\"\n#        - \"CMOV\"\n#        - \"CX16\"\n#        - \"ERMS\"\n#        - \"F16C\"\n#        - \"HTT\"\n#        - \"LZCNT\"\n#        - \"MMX\"\n#        - \"MMXEXT\"\n#        - \"NX\"\n#        - \"POPCNT\"\n#        - \"RDRAND\"\n#        - \"RDSEED\"\n#        - \"RDTSCP\"\n#        - \"SGX\"\n#        - \"SSE\"\n#        - \"SSE2\"\n#        - \"SSE3\"\n#        - \"SSE4.1\"\n#        - \"SSE4.2\"\n#        - \"SSSE3\"\n#      attributeWhitelist:\n#  kernel:\n#    kconfigFile: \"/path/to/kconfig\"\n#    configOpts:\n#      - \"NO_HZ\"\n#      - \"X86\"\n#      - \"DMI\"\n#  pci:\n#    deviceClassWhitelist:\n#      - \"0200\"\n#      - \"03\"\n#      - \"12\"\n#    deviceLabelFields:\n#      - \"class\"\n#      - \"vendor\"\n#      - \"device\"\n#      - \"subsystem_vendor\"\n#      - \"subsystem_device\"\n#  usb:\n#    deviceClassWhitelist:\n#      - \"0e\"\n#      - \"ef\"\n#      - \"fe\"\n#      - \"ff\"\n#    deviceLabelFields:\n#      - \"class\"\n#      - \"vendor\"\n#      - \"device\"\n#  custom:\n#    - name: \"my.kernel.feature\"\n#      matchOn:\n#        - loadedKMod: [\"example_kmod1\", \"example_kmod2\"]\n#    - name: \"my.pci.feature\"\n#      matchOn:\n#        - pciId:\n#            class: [\"0200\"]\n#            vendor: [\"15b3\"]\n#            device: [\"1014\", \"1017\"]\n#        - pciId :\n#            vendor: [\"8086\"]\n#            device: [\"1000\", \"1100\"]\n#    - name: \"my.usb.feature\"\n#      matchOn:\n#        - usbId:\n#          class: [\"ff\"]\n#          vendor: [\"03e7\"]\n#          device: [\"2485\"]\n#        - usbId:\n#          class: [\"fe\"]\n#          vendor: [\"1a6e\"]\n#          device: [\"089a\"]\n#    - name: \"my.combined.feature\"\n#      matchOn:\n#        - pciId:\n#            vendor: [\"15b3\"]\n#            device: [\"1014\", \"1017\"]\n#          loadedKMod : [\"vendor_kmod1\", \"vendor_kmod2\"]\n"
                }
              }
            },
            {
              "apiVersion": "nfd.kubernetes.io/v1alpha1",
              "kind": "NodeFeatureRule",
              "metadata": {
                "name": "my-sample-rule-object"
              },
              "spec": {
                "rules": [
                  {
                    "labels": {
                      "my-sample-feature": "true"
                    },
                    "matchFeatures": [
                      {
                        "feature": "kernel.loadedmodule",
                        "matchExpressions": {
                          "dummy": {
                            "op": "Exists"
                          }
                        }
                      },
                      {
                        "feature": "kernel.config",
                        "matchExpressions": {
                          "X86": {
                            "op": "In",
                            "value": [
                              "y"
                            ]
                          }
                        }
                      }
                    ],
                    "name": "my sample rule"
                  }
                ]
              }
            }
          ]
        capabilities: Basic Install
        categories: Integration & Delivery
        containerImage: k8s.gcr.io/nfd/node-feature-discovery-operator:v0.5.0-minimal
        createdAt: "2022-01-19T18:23:18Z"
        description: |-
          The Node Feature Discovery Operator manages the detection of hardware features and configuration in a Kubernetes cluster by labeling the nodes with hardware-specific information. The Node Feature Discovery (NFD) will label the host with node-specific attributes, like PCI cards, kernel, or OS version, and many more.

          NFD consists  of the following software components:

          The NFD Operator is based on the Operator Framework an open source toolkit to manage Kubernetes native applications, called Operators, in an effective, automated, and scalable way.

          ##NFD-Master
          NFD-Master is the daemon responsible for communication towards the Kubernetes API. That is, it receives labeling requests from the worker and modifies node objects accordingly.

          ##NFD-Worker
          NFD-Worker is a daemon responsible for feature detection. It then communicates the information to nfd-master which does the actual node labeling. One instance of nfd-worker is supposed to be running on each node of the cluster.

          ##NFD-Topology-Updater
          NFD-Topology-Updater is a daemon responsible for examining allocated resources on a worker node to account for resources available to be allocated to new pod on a per-zone basis (where a zone can be a NUMA node). It then communicates the information to nfd-master which does the NodeResourceTopology CR creation corresponding to all the nodes in the cluster. One instance of nfd-topology-updater is supposed to be running on each node of the cluster.
        operators.operatorframework.io/builder: operator-sdk-v1.19.0
        operators.operatorframework.io/project_layout: go.kubebuilder.io/v3
        repository: https://github.com/kubernetes-sigs/node-feature-discovery-operator
      apiservicedefinitions: {}
      customresourcedefinitions:
        owned:
        - description: |
            The NodeFeatureDiscovery instance is the CustomResource being watched by the NFD-Operator, and holds all the needed information to setup the behaviour of the master and worker pods
          kind: NodeFeatureDiscovery
          name: nodefeaturediscoveries.nfd.kubernetes.io
          version: v1
        - description: |
            NodeFeatureRule resource specifies a configuration for feature-based customization of node objects, such as node labeling.
          kind: NodeFeatureRule
          name: nodefeaturerules.nfd.kubernetes.io
          version: v1alpha1
        - description: |
            NodeResourceTopology resource describes node resources and their topology.
          kind: NodeResourceTopology
          name: noderesourcetopologies.topology.node.k8s.io
          version: v1alpha1
      description: |-
        The Node Feature Discovery Operator manages the detection of hardware features and configuration in a Kubernetes cluster by labeling the nodes with hardware-specific information. The Node Feature Discovery (NFD) will label the host with node-specific attributes, like PCI cards, kernel, or OS version, and many more.

        NFD consists  of the following software components:

        The NFD Operator is based on the Operator Framework an open source toolkit to manage Kubernetes native applications, called Operators, in an effective, automated, and scalable way.

        ##NFD-Master
        NFD-Master is the daemon responsible for communication towards the Kubernetes API. That is, it receives labeling requests from the worker and modifies node objects accordingly.

        ##NFD-Worker
        NFD-Worker is a daemon responsible for feature detection. It then communicates the information to nfd-master which does the actual node labeling. One instance of nfd-worker is supposed to be running on each node of the cluster.

        ##NFD-Topology-Updater
        NFD-Topology-Updater is a daemon responsible for examining allocated resources on a worker node to account for resources available to be allocated to new pod on a per-zone basis (where a zone can be a NUMA node). It then communicates the information to nfd-master which does the NodeResourceTopology CR creation corresponding to all the nodes in the cluster. One instance of nfd-topology-updater is supposed to be running on each node of the cluster.
      displayName: nfd-operator
      installModes:
      - supported: false
        type: OwnNamespace
      - supported: false
        type: SingleNamespace
      - supported: false
        type: MultiNamespace
      - supported: true
        type: AllNamespaces
      keywords:
      - discovery
      links:
      - name: Documentation operator
        url: https://kubernetes-sigs.github.io/node-feature-discovery-operator/v0.5
      - name: Documentation operand
        url: https://kubernetes-sigs.github.io/node-feature-discovery
      maintainers:
      - email: carangog@redhat.com
        name: Eduardo Arango
      - email: zkaiser@nvidia.com
        name: Zvonko Kaiser
      - email: markus.lehtonen@intel.com
        name: Markus Lehtonen
      maturity: stable
      provider:
        name: kubernetes-sigs
      relatedImages:
      - gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0
      - k8s.gcr.io/nfd/node-feature-discovery-operator:v0.5.0-minimal
      version: 0.5.0
    name: stable
  defaultChannel: stable
  packageName: nfd-operator
  provider:
    name: kubernetes-sigs
