apiVersion: packages.operators.coreos.com/v1
kind: PackageManifest
metadata:
  creationTimestamp: "2022-10-03T18:25:13Z"
  labels:
    catalog: operatorhubio-catalog
    catalog-namespace: olm
    operatorframework.io/arch.amd64: supported
    operatorframework.io/os.linux: supported
    provider: IBM
    provider-url: ""
  name: enc-key-sync
  namespace: default
spec: {}
status:
  catalogSource: operatorhubio-catalog
  catalogSourceDisplayName: Community Operators
  catalogSourceNamespace: olm
  catalogSourcePublisher: OperatorHub.io
  channels:
  - currentCSV: enc-key-sync-operator.v0.0.1
    currentCSVDesc:
      annotations:
        alm-examples: |
          [
            {
              "apiVersion": "oci.crypt/v1alpha1",
              "kind": "EncKeySync",
              "metadata": {
                "name": "example-enckeysync"
              },
              "spec": {
                "keysDir": "/etc/crio/keys/enc-key-sync",
                "isOpenShift": false
              }
            }
          ]
        capabilities: Basic Install
        categories: Security
        certified: "false"
        containerImage: docker.io/lumjjb/enc-key-sync-operator:v0.0.1
        createdAt: "2020-07-21 20:00:00"
        description: |+
          This operator provides facility to sync decryption keys required for Encrypted Container Images.

        operatorhub.io/ui-metadata-max-k8s-version: "1.21"
        repository: https://github.com/IBM/k8s-enc-image-operator
        support: IBM
      apiservicedefinitions: {}
      customresourcedefinitions:
        owned:
        - description: Configuration for enc-key-sync helm deployment
          displayName: EncKeySync helm configuration
          kind: EncKeySync
          name: enckeysyncs.oci.crypt
          version: v1alpha1
      description: |
        ## About this Operator
        This operator provides facility to sync decryption keys required for Encrypted Container Images.
        This operator allows the easy deployment of a Daemonset that syncs keys so that they are available to the container runtime (i.e. containerd/crio). The current supported ways to do this are through
        - Kubernetes secrets

        For more information on what encrypted container images are and how to encrypt and use them, please refer to the links attached in this operator manifest.
        ### Prerequisites for enabling this Operator
        - Kubernetes (>= 1.17)
        - With cri-o runtime (>=1.17) or containerd (>=1.4)
        ### Questions and support
        If you have any questions about the operator and/or encrypted container images, please reach out to our maintainers or create an issue in the github link in the manifest.
        ## Getting Started
        After installing the operator, getting started with decrypting container images in your cluster is done in three simple steps
        - Setup the key path on container runtimes on each node (optional if done by cloud provider)
        - Initialize the operator with the key path
        - Configuring decryption keys

        ### Setup the key path on container runtimes on each node
        Depending on the runtime you use, they will look for decryption keys to decrypt the container images in different directories.
        - cri-o (>=1.17) by default has keys in directory `/etc/crio/keys`.
          This is configurable in the runtime if required, please refer to the
          [cri-o decryption doc](https://github.com/cri-o/cri-o/blob/master/tutorials/decryption.md).

        - containerd (>=1.4) requires some configuration of the runtime. For this,
          please refer to the [containerd decryption doc](https://github.com/containerd/cri/blob/master/docs/decryption.md).

        For OpenShift (>=4.4), it is configured by default to use cri-o with path `/etc/crio/keys`
        ### Initialize the operator with the key path
        From the previous step, we have gotten the key path, lets initialize the operator by creating the `EncKeySync` custom resource. Replacing `keysDir` with a subpath of the path obtained from the previous step.
        For example, if you have the path set as `/path/to/keys`, then set `keysDir: /path/to/keys/enc-key-sync`.

         ```yaml
         apiVersion: oci.crypt/v1alpha1
         kind: EncKeySync
         metadata:
           name: example-enckeysync
         spec:
           # Replace this line with your path if required
           keysDir: /etc/crio/keys/enc-key-sync
           isOpenShift: true
         ```

        The default value of `keysDir` uses the default cri-o runtime path. If running on an OpenShift cluster, set `isOpenShift: true`.
        What the daemonset does is it syncs all keys that you will configure to this path on every worker node's host file system.
        ### Configuring decryption keys
        Great, now that we have the key syncer running, we can create our decryption keys. This can be done by creating a kubernetes secret in the namespace where the operator was installed with `--type=key`. For example

         ```
         $ kubectl create -n enc-key-sync secret generic  \
           --type=key \
           --from-file=my-priv-key.pem \
           my-decryption-key
         ```

        In this case, we installed the operator in namespace `enc-key-sync`, and have a private key locally with filename `my-priv-key.pem`. If you are following this example, you can use the following private key:

          ```
          $ cat > my-priv-key.pem <<EOF
          -----BEGIN RSA PRIVATE KEY-----
          MIIEpAIBAAKCAQEAv8Ny7dCWQ8Pdq1ddYSwkQOCB3lUEZVEyj9StX3jnISF/rxIs
          UZzJfbOrQN0fGkm+1sCCtltgQdztTjito8FhDGflqQBSmV40XP3iZnNUJDrHuAol
          463Z/BuxxFXL3ry6rTosLGfrRwdQjxp8RSsnWyIIO2rmcqXZYe4SCtiMjMejLlTI
          DWLIMdYL3d6hA4DpgDLoh6EPmhKMVVwRt5b0ew5eMLcDuq6ButOM5yv4zYVHNraj
          Y41NK+abSlFb6wzMg2AUDiC/MxV1LRq6mpyZGJllx3LS1M1j7fDO3pmh/M0X7yD/
          4RgHwFaW4/4CQBw3fyxrOv0pZzZay+o/pyMMWwIDAQABAoIBAQC8HV2HEZH21BOG
          W+PMyWKfCh4cHsZ7JZY2JmoVOCN0CsqY0XkMboPyfehHbyNtxF4jiSIxBZ59vd5F
          V7Bu7eroIpvWl+xva0xu1NfdrNEj4U2+qqXUnd0zRW+zrH6b+AQgnupqfV7+hJxw
          ZYj2yYiIC/CLaSi72xpOyR6F6TyndBVRFePoktfCsPcevQDTVeYEbTr9q52vwK3d
          nROr3bV+J2y5Glce/4A6yTknJoDNWcDFvy3Ai//5bpV2x38E+FNRRb1BfZN56/7M
          3bEvwLyJ2bvnEqAQ+7Z8+307aMiMr01s1IQLYvi5Z1fvNewoaj1yxjxfawPvcMtB
          YDg6soDRAoGBAOA8zv/a48WD+dCb9WFk4YtRqg3ZjwSRKT3Afsfkd5lGz8yRlGP4
          HXCP8nQ7c2TUEjqiQmtyxrq7yi5dacIzzZXAlS8ORA5BxCfrxzUBvuPKgGoxeozC
          /Xef7mJ6Si+JDIjY2GKwO8I66JgxScTi7JWlyXmQ26rY4/0Yg8f6Au8XAoGBANrt
          FPYVXn4S6VdAdhFzkx85ymQ+uX6yflRIUcmP5sySKMCPD1GSrVujDIgj485sEmH2
          h57gDWzFWLmEU6PDsG2Bpsi29w5MMibr4y7Ez6y1rNd9eor5lDIhKi2sJRA0Ftj1
          tBl31rhkJfCnzVIRn3Q+ZuvgTca7J9oUnCFBlfddAoGAUih1f3Dnu1qbkT9TLJgV
          u0H0mJZ5vCajgaihywN+fn5fbIh6YhZqUu+q2cNeiDbbZvhEdbHb9lcPwOUg9rKc
          RJ4HCvKjJMYb5LSSjG1TT4rGeiIe0Kwwyj+izBoaTEhee1VYEvCXNJb42apVaPnr
          zPitVQkqMvK8teLhhceog4kCgYA2M/C2pL/KcyA2rA0PcRAB8Sr8+tKuXb8NWwJ0
          5x37lExmsITYa3pkb9AQfOJQH03F12Xongx027+F3w9eQnsSAcGrfDFa5t6b6FdN
          IwlP94Mdr0GB2x0n9DIfMLnUczEc8mhuzc7pxFHobYNWSGq0Oyb8S4K2K2xIgEXP
          rg9VOQKBgQCvZXPe7uRyfeFxH9uexhPOZEYNpF8/SxeFnTmxoyDNgfTaT6wC0Vwt
          jALXNbZLiYen9cUBfusELk8chLna1tCvLDUTT0m/Y80d8p+S80EsZ20ja1A3HdBv
          h1TW/ep4aPeI0UE0ZNOifUB37IGXETO5fohbzm799dH8jtAkE02pww==
          -----END RSA PRIVATE KEY-----
          EOF
          ```

        ### Running an encrypted container
        Great - we are done setting up the operator and configuring keys, now we can run encrypted container images! If you followed along with the provided private key, you should be able to run the image `docker.io/lumjjb/sample-enc-app`

         ```
         $ kubectl run enc-workload --image=docker.io/lumjjb/sample-enc-app
         ```

        Great you have successfully run an encrypted container image!
      displayName: Encrypted Images Key Syncer Helm Operator
      installModes:
      - supported: true
        type: OwnNamespace
      - supported: true
        type: SingleNamespace
      - supported: false
        type: MultiNamespace
      - supported: false
        type: AllNamespaces
      keywords:
      - encryption
      - decryption
      - oci
      - image
      - container
      links:
      - name: 'CNCF Webinar: Encrypted Container Images'
        url: https://www.cncf.io/webinars/advancing-image-security-and-compliance-through-container-image-encryption/
      - name: 'Blog: Advancing image security encrypted container images'
        url: https://developer.ibm.com/articles/advancing-image-security-encrypted-container-images/
      maintainers:
      - email: lumjjb@gmail.com
        name: Brandon Lum
      maturity: alpha
      minKubeVersion: 1.17.0
      provider:
        name: IBM
      relatedImages:
      - docker.io/lumjjb/enc-key-sync-operator:v0.0.1
      version: 0.0.1
    name: alpha
  defaultChannel: alpha
  packageName: enc-key-sync
  provider:
    name: IBM
